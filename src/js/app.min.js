/**
 * @license AngularJS v1.0.4
 * (c) 2010-2012 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {
'use strict';

/**
 * @ngdoc overview
 * @name ngCookies
 */


angular.module('ngCookies', ['ng']).
  /**
   * @ngdoc object
   * @name ngCookies.$cookies
   * @requires $browser
   *
   * @description
   * Provides read/write access to browser's cookies.
   *
   * Only a simple Object is exposed and by adding or removing properties to/from
   * this object, new cookies are created/deleted at the end of current $eval.
   *
   * @example
   */
   factory('$cookies', ['$rootScope', '$browser', function ($rootScope, $browser) {
      var cookies = {},
          lastCookies = {},
          lastBrowserCookies,
          runEval = false,
          copy = angular.copy,
          isUndefined = angular.isUndefined;

      //creates a poller fn that copies all cookies from the $browser to service & inits the service
      $browser.addPollFn(function() {
        var currentCookies = $browser.cookies();
        if (lastBrowserCookies != currentCookies) { //relies on browser.cookies() impl
          lastBrowserCookies = currentCookies;
          copy(currentCookies, lastCookies);
          copy(currentCookies, cookies);
          if (runEval) $rootScope.$apply();
        }
      })();

      runEval = true;

      //at the end of each eval, push cookies
      //TODO: this should happen before the "delayed" watches fire, because if some cookies are not
      //      strings or browser refuses to store some cookies, we update the model in the push fn.
      $rootScope.$watch(push);

      return cookies;


      /**
       * Pushes all the cookies from the service to the browser and verifies if all cookies were stored.
       */
      function push() {
        var name,
            value,
            browserCookies,
            updated;

        //delete any cookies deleted in $cookies
        for (name in lastCookies) {
          if (isUndefined(cookies[name])) {
            $browser.cookies(name, undefined);
          }
        }

        //update all cookies updated in $cookies
        for(name in cookies) {
          value = cookies[name];
          if (!angular.isString(value)) {
            if (angular.isDefined(lastCookies[name])) {
              cookies[name] = lastCookies[name];
            } else {
              delete cookies[name];
            }
          } else if (value !== lastCookies[name]) {
            $browser.cookies(name, value);
            updated = true;
          }
        }

        //verify what was actually stored
        if (updated){
          updated = false;
          browserCookies = $browser.cookies();

          for (name in cookies) {
            if (cookies[name] !== browserCookies[name]) {
              //delete or reset all cookies that the browser dropped from $cookies
              if (isUndefined(browserCookies[name])) {
                delete cookies[name];
              } else {
                cookies[name] = browserCookies[name];
              }
              updated = true;
            }
          }
        }
      }
    }]).


  /**
   * @ngdoc object
   * @name ngCookies.$cookieStore
   * @requires $cookies
   *
   * @description
   * Provides a key-value (string-object) storage, that is backed by session cookies.
   * Objects put or retrieved from this storage are automatically serialized or
   * deserialized by angular's toJson/fromJson.
   * @example
   */
   factory('$cookieStore', ['$cookies', function($cookies) {

      return {
        /**
         * @ngdoc method
         * @name ngCookies.$cookieStore#get
         * @methodOf ngCookies.$cookieStore
         *
         * @description
         * Returns the value of given cookie key
         *
         * @param {string} key Id to use for lookup.
         * @returns {Object} Deserialized cookie value.
         */
        get: function(key) {
          return angular.fromJson($cookies[key]);
        },

        /**
         * @ngdoc method
         * @name ngCookies.$cookieStore#put
         * @methodOf ngCookies.$cookieStore
         *
         * @description
         * Sets a value for given cookie key
         *
         * @param {string} key Id for the `value`.
         * @param {Object} value Value to be stored.
         */
        put: function(key, value) {
          $cookies[key] = angular.toJson(value);
        },

        /**
         * @ngdoc method
         * @name ngCookies.$cookieStore#remove
         * @methodOf ngCookies.$cookieStore
         *
         * @description
         * Remove given cookie
         *
         * @param {string} key Id of the key-value pair to delete.
         */
        remove: function(key) {
          delete $cookies[key];
        }
      };

    }]);

})(window, window.angular);

// Avoid `console` errors in browsers that lack a console.
(function() {
    var method;
    var noop = function () {};
    var methods = [
        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
        'timeStamp', 'trace', 'warn'
    ];
    var length = methods.length;
    var console = (window.console = window.console || {});

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
}());

// Place any jQuery/helper plugins in here.

var Markdown={};(function(){function identity(x){return x;}
function returnFalse(x){return false;}
function HookCollection(){}
HookCollection.prototype={chain:function(hookname,func){var original=this[hookname];if(!original)
throw new Error("unknown hook "+hookname);if(original===identity)
this[hookname]=func;else
this[hookname]=function(x){return func(original(x));}},set:function(hookname,func){if(!this[hookname])
throw new Error("unknown hook "+hookname);this[hookname]=func;},addNoop:function(hookname){this[hookname]=identity;},addFalse:function(hookname){this[hookname]=returnFalse;}};Markdown.HookCollection=HookCollection;function SaveHash(){}
SaveHash.prototype={set:function(key,value){this["s_"+key]=value;},get:function(key){return this["s_"+key];}};Markdown.Converter=function(){var pluginHooks=this.hooks=new HookCollection();pluginHooks.addNoop("plainLinkText");pluginHooks.addNoop("preConversion");pluginHooks.addNoop("postConversion");var g_urls;var g_titles;var g_html_blocks;var g_list_level;this.makeHtml=function(text){if(g_urls)
throw new Error("Recursive call to converter.makeHtml");g_urls=new SaveHash();g_titles=new SaveHash();g_html_blocks=[];g_list_level=0;text=pluginHooks.preConversion(text);text=text.replace(/~/g,"~T");text=text.replace(/\$/g,"~D");text=text.replace(/\r\n/g,"\n");text=text.replace(/\r/g,"\n");text="\n\n"+text+"\n\n";text=_Detab(text);text=text.replace(/^[ \t]+$/mg,"");text=_HashHTMLBlocks(text);text=_StripLinkDefinitions(text);text=_RunBlockGamut(text);text=_UnescapeSpecialChars(text);text=text.replace(/~D/g,"$$");text=text.replace(/~T/g,"~");text=pluginHooks.postConversion(text);g_html_blocks=g_titles=g_urls=null;return text;};function _StripLinkDefinitions(text){text=text.replace(/^[ ]{0,3}\[(.+)\]:[ \t]*\n?[ \t]*<?(\S+?)>?(?=\s|$)[ \t]*\n?[ \t]*((\n*)["(](.+?)[")][ \t]*)?(?:\n+)/gm,function(wholeMatch,m1,m2,m3,m4,m5){m1=m1.toLowerCase();g_urls.set(m1,_EncodeAmpsAndAngles(m2));if(m4){return m3;}else if(m5){g_titles.set(m1,m5.replace(/"/g,"&quot;"));}
return"";});return text;}
function _HashHTMLBlocks(text){var block_tags_a="p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del"
var block_tags_b="p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math"
text=text.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b[^\r]*?\n<\/\2>[ \t]*(?=\n+))/gm,hashElement);text=text.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math)\b[^\r]*?.*<\/\2>[ \t]*(?=\n+)\n)/gm,hashElement);text=text.replace(/\n[ ]{0,3}((<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,hashElement);text=text.replace(/\n\n[ ]{0,3}(<!(--(?:|(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>[ \t]*(?=\n{2,}))/g,hashElement);text=text.replace(/(?:\n\n)([ ]{0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,hashElement);return text;}
function hashElement(wholeMatch,m1){var blockText=m1;blockText=blockText.replace(/^\n+/,"");blockText=blockText.replace(/\n+$/g,"");blockText="\n\n~K"+(g_html_blocks.push(blockText)-1)+"K\n\n";return blockText;}
function _RunBlockGamut(text,doNotUnhash){text=_DoHeaders(text);var replacement="<hr />\n";text=text.replace(/^[ ]{0,2}([ ]?\*[ ]?){3,}[ \t]*$/gm,replacement);text=text.replace(/^[ ]{0,2}([ ]?-[ ]?){3,}[ \t]*$/gm,replacement);text=text.replace(/^[ ]{0,2}([ ]?_[ ]?){3,}[ \t]*$/gm,replacement);text=_DoLists(text);text=_DoCodeBlocks(text);text=_DoBlockQuotes(text);text=_HashHTMLBlocks(text);text=_FormParagraphs(text,doNotUnhash);return text;}
function _RunSpanGamut(text){text=_DoCodeSpans(text);text=_EscapeSpecialCharsWithinTagAttributes(text);text=_EncodeBackslashEscapes(text);text=_DoImages(text);text=_DoAnchors(text);text=_DoAutoLinks(text);text=text.replace(/~P/g,"://");text=_EncodeAmpsAndAngles(text);text=_DoItalicsAndBold(text);text=text.replace(/  +\n/g," <br>\n");return text;}
function _EscapeSpecialCharsWithinTagAttributes(text){var regex=/(<[a-z\/!$]("[^"]*"|'[^']*'|[^'">])*>|<!(--(?:|(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>)/gi;text=text.replace(regex,function(wholeMatch){var tag=wholeMatch.replace(/(.)<\/?code>(?=.)/g,"$1`");tag=escapeCharacters(tag,wholeMatch.charAt(1)=="!"?"\\`*_/":"\\`*_");return tag;});return text;}
function _DoAnchors(text){text=text.replace(/(\[((?:\[[^\]]*\]|[^\[\]])*)\][ ]?(?:\n[ ]*)?\[(.*?)\])()()()()/g,writeAnchorTag);text=text.replace(/(\[((?:\[[^\]]*\]|[^\[\]])*)\]\([ \t]*()<?((?:\([^)]*\)|[^()])*?)>?[ \t]*((['"])(.*?)\6[ \t]*)?\))/g,writeAnchorTag);text=text.replace(/(\[([^\[\]]+)\])()()()()()/g,writeAnchorTag);return text;}
function writeAnchorTag(wholeMatch,m1,m2,m3,m4,m5,m6,m7){if(m7==undefined)m7="";var whole_match=m1;var link_text=m2.replace(/:\/\//g,"~P");var link_id=m3.toLowerCase();var url=m4;var title=m7;if(url==""){if(link_id==""){link_id=link_text.toLowerCase().replace(/ ?\n/g," ");}
url="#"+link_id;if(g_urls.get(link_id)!=undefined){url=g_urls.get(link_id);if(g_titles.get(link_id)!=undefined){title=g_titles.get(link_id);}}
else{if(whole_match.search(/\(\s*\)$/m)>-1){url="";}else{return whole_match;}}}
url=encodeProblemUrlChars(url);url=escapeCharacters(url,"*_");var result="<a href=\""+url+"\"";if(title!=""){title=attributeEncode(title);title=escapeCharacters(title,"*_");result+=" title=\""+title+"\"";}
result+=">"+link_text+"</a>";return result;}
function _DoImages(text){text=text.replace(/(!\[(.*?)\][ ]?(?:\n[ ]*)?\[(.*?)\])()()()()/g,writeImageTag);text=text.replace(/(!\[(.*?)\]\s?\([ \t]*()<?(\S+?)>?[ \t]*((['"])(.*?)\6[ \t]*)?\))/g,writeImageTag);return text;}
function attributeEncode(text){return text.replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;");}
function writeImageTag(wholeMatch,m1,m2,m3,m4,m5,m6,m7){var whole_match=m1;var alt_text=m2;var link_id=m3.toLowerCase();var url=m4;var title=m7;if(!title)title="";if(url==""){if(link_id==""){link_id=alt_text.toLowerCase().replace(/ ?\n/g," ");}
url="#"+link_id;if(g_urls.get(link_id)!=undefined){url=g_urls.get(link_id);if(g_titles.get(link_id)!=undefined){title=g_titles.get(link_id);}}
else{return whole_match;}}
alt_text=escapeCharacters(attributeEncode(alt_text),"*_[]()");url=escapeCharacters(url,"*_");var result="<img src=\""+url+"\" alt=\""+alt_text+"\"";title=attributeEncode(title);title=escapeCharacters(title,"*_");result+=" title=\""+title+"\"";result+=" />";return result;}
function _DoHeaders(text){text=text.replace(/^(.+)[ \t]*\n=+[ \t]*\n+/gm,function(wholeMatch,m1){return"<h1>"+_RunSpanGamut(m1)+"</h1>\n\n";});text=text.replace(/^(.+)[ \t]*\n-+[ \t]*\n+/gm,function(matchFound,m1){return"<h2>"+_RunSpanGamut(m1)+"</h2>\n\n";});text=text.replace(/^(\#{1,6})[ \t]*(.+?)[ \t]*\#*\n+/gm,function(wholeMatch,m1,m2){var h_level=m1.length;return"<h"+h_level+">"+_RunSpanGamut(m2)+"</h"+h_level+">\n\n";});return text;}
function _DoLists(text){text+="~0";var whole_list=/^(([ ]{0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(~0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm;if(g_list_level){text=text.replace(whole_list,function(wholeMatch,m1,m2){var list=m1;var list_type=(m2.search(/[*+-]/g)>-1)?"ul":"ol";var result=_ProcessListItems(list,list_type);result=result.replace(/\s+$/,"");result="<"+list_type+">"+result+"</"+list_type+">\n";return result;});}else{whole_list=/(\n\n|^\n?)(([ ]{0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(~0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/g;text=text.replace(whole_list,function(wholeMatch,m1,m2,m3){var runup=m1;var list=m2;var list_type=(m3.search(/[*+-]/g)>-1)?"ul":"ol";var result=_ProcessListItems(list,list_type);result=runup+"<"+list_type+">\n"+result+"</"+list_type+">\n";return result;});}
text=text.replace(/~0/,"");return text;}
var _listItemMarkers={ol:"\\d+[.]",ul:"[*+-]"};function _ProcessListItems(list_str,list_type){g_list_level++;list_str=list_str.replace(/\n{2,}$/,"\n");list_str+="~0";var marker=_listItemMarkers[list_type];var re=new RegExp("(^[ \\t]*)("+marker+")[ \\t]+([^\\r]+?(\\n+))(?=(~0|\\1("+marker+")[ \\t]+))","gm");var last_item_had_a_double_newline=false;list_str=list_str.replace(re,function(wholeMatch,m1,m2,m3){var item=m3;var leading_space=m1;var ends_with_double_newline=/\n\n$/.test(item);var contains_double_newline=ends_with_double_newline||item.search(/\n{2,}/)>-1;if(contains_double_newline||last_item_had_a_double_newline){item=_RunBlockGamut(_Outdent(item),true);}
else{item=_DoLists(_Outdent(item));item=item.replace(/\n$/,"");item=_RunSpanGamut(item);}
last_item_had_a_double_newline=ends_with_double_newline;return"<li>"+item+"</li>\n";});list_str=list_str.replace(/~0/g,"");g_list_level--;return list_str;}
function _DoCodeBlocks(text){text+="~0";text=text.replace(/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=~0))/g,function(wholeMatch,m1,m2){var codeblock=m1;var nextChar=m2;codeblock=_EncodeCode(_Outdent(codeblock));codeblock=_Detab(codeblock);codeblock=codeblock.replace(/^\n+/g,"");codeblock=codeblock.replace(/\n+$/g,"");codeblock='<pre class="prettyprint linenums"><code>'+codeblock+'\n</code></pre>';return"\n\n"+codeblock+"\n\n"+nextChar;});text=text.replace(/~0/,"");return text;}
function hashBlock(text){text=text.replace(/(^\n+|\n+$)/g,"");return"\n\n~K"+(g_html_blocks.push(text)-1)+"K\n\n";}
function _DoCodeSpans(text){text=text.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,function(wholeMatch,m1,m2,m3,m4){var c=m3;c=c.replace(/^([ \t]*)/g,"");c=c.replace(/[ \t]*$/g,"");c=_EncodeCode(c);c=c.replace(/:\/\//g,"~P");return m1+"<code>"+c+"</code>";});return text;}
function _EncodeCode(text){text=text.replace(/&/g,"&amp;");text=text.replace(/</g,"&lt;");text=text.replace(/>/g,"&gt;");text=escapeCharacters(text,"\*_{}[]\\",false);return text;}
function _DoItalicsAndBold(text){text=text.replace(/([\W_]|^)(\*\*|__)(?=\S)([^\r]*?\S[\*_]*)\2([\W_]|$)/g,"$1<strong>$3</strong>$4");text=text.replace(/([\W_]|^)(\*|_)(?=\S)([^\r\*_]*?\S)\2([\W_]|$)/g,"$1<em>$3</em>$4");return text;}
function _DoBlockQuotes(text){text=text.replace(/((^[ \t]*>[ \t]?.+\n(.+\n)*\n*)+)/gm,function(wholeMatch,m1){var bq=m1;bq=bq.replace(/^[ \t]*>[ \t]?/gm,"~0");bq=bq.replace(/~0/g,"");bq=bq.replace(/^[ \t]+$/gm,"");bq=_RunBlockGamut(bq);bq=bq.replace(/(^|\n)/g,"$1  ");bq=bq.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm,function(wholeMatch,m1){var pre=m1;pre=pre.replace(/^  /mg,"~0");pre=pre.replace(/~0/g,"");return pre;});return hashBlock("<blockquote>\n"+bq+"\n</blockquote>");});return text;}
function _FormParagraphs(text,doNotUnhash){text=text.replace(/^\n+/g,"");text=text.replace(/\n+$/g,"");var grafs=text.split(/\n{2,}/g);var grafsOut=[];var markerRe=/~K(\d+)K/;var end=grafs.length;for(var i=0;i<end;i++){var str=grafs[i];if(markerRe.test(str)){grafsOut.push(str);}
else if(/\S/.test(str)){str=_RunSpanGamut(str);str=str.replace(/^([ \t]*)/g,"<p>");str+="</p>"
grafsOut.push(str);}}
if(!doNotUnhash){end=grafsOut.length;for(var i=0;i<end;i++){var foundAny=true;while(foundAny){foundAny=false;grafsOut[i]=grafsOut[i].replace(/~K(\d+)K/g,function(wholeMatch,id){foundAny=true;return g_html_blocks[id];});}}}
return grafsOut.join("\n\n");}
function _EncodeAmpsAndAngles(text){text=text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,"&amp;");text=text.replace(/<(?![a-z\/?\$!])/gi,"&lt;");return text;}
function _EncodeBackslashEscapes(text){text=text.replace(/\\(\\)/g,escapeCharacters_callback);text=text.replace(/\\([`*_{}\[\]()>#+-.!])/g,escapeCharacters_callback);return text;}
function _DoAutoLinks(text){text=text.replace(/(^|\s)(https?|ftp)(:\/\/[-A-Z0-9+&@#\/%?=~_|\[\]\(\)!:,\.;]*[-A-Z0-9+&@#\/%=~_|\[\]])($|\W)/gi,"$1<$2$3>$4");var replacer=function(wholematch,m1){return"<a href=\""+m1+"\">"+pluginHooks.plainLinkText(m1)+"</a>";}
text=text.replace(/<((https?|ftp):[^'">\s]+)>/gi,replacer);var email_replacer=function(wholematch,m1){var mailto='mailto:'
var link
var email
if(m1.substring(0,mailto.length)!=mailto){link=mailto+m1;email=m1;}else{link=m1;email=m1.substring(mailto.length,m1.length);}
return"<a href=\""+link+"\">"+pluginHooks.plainLinkText(email)+"</a>";}
text=text.replace(/<((?:mailto:)?([-.\w]+\@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+))>/gi,email_replacer);return text;}
function _UnescapeSpecialChars(text){text=text.replace(/~E(\d+)E/g,function(wholeMatch,m1){var charCodeToReplace=parseInt(m1);return String.fromCharCode(charCodeToReplace);});return text;}
function _Outdent(text){text=text.replace(/^(\t|[ ]{1,4})/gm,"~0");text=text.replace(/~0/g,"")
return text;}
function _Detab(text){if(!/\t/.test(text))
return text;var spaces=["    ","   ","  "," "],skew=0,v;return text.replace(/[\n\t]/g,function(match,offset){if(match==="\n"){skew=offset+1;return match;}
v=(offset-skew)%4;skew=offset+1;return spaces[v];});}
var _problemUrlChars=/(?:["'*()[\]:]|~D)/g;function encodeProblemUrlChars(url){if(!url)
return"";var len=url.length;return url.replace(_problemUrlChars,function(match,offset){if(match=="~D")
return"%24";if(match==":"){if(offset==len-1||/[0-9\/]/.test(url.charAt(offset+1)))
return":";if(url.substring(0,'mailto:'.length)==='mailto:')
return":";if(url.substring(0,'magnet:'.length)==='magnet:')
return":";}
return"%"+match.charCodeAt(0).toString(16);});}
function escapeCharacters(text,charsToEscape,afterBackslash){var regexString="(["+charsToEscape.replace(/([\[\]\\])/g,"\\$1")+"])";if(afterBackslash){regexString="\\\\"+regexString;}
var regex=new RegExp(regexString,"g");text=text.replace(regex,escapeCharacters_callback);return text;}
function escapeCharacters_callback(wholeMatch,m1){var charCodeToEscape=m1.charCodeAt(0);return"~E"+charCodeToEscape+"E";}};})();

(function(){var output,Converter;if(typeof exports==="object"&&typeof require==="function"){output=exports;Converter=require("./Markdown.Converter").Converter;}else{output=window.Markdown;Converter=output.Converter;}
output.getSanitizingConverter=function(){var converter=new Converter();converter.hooks.chain("postConversion",sanitizeHtml);converter.hooks.chain("postConversion",balanceTags);return converter;}
function sanitizeHtml(html){return html.replace(/<[^>]*>?/gi,sanitizeTag);}
var basic_tag_whitelist=/^(<\/?(b|blockquote|code|del|dd|dl|dt|em|h1|h2|h3|i|kbd|li|ol|p|s|sup|sub|strong|strike|ul)>|<(br|hr)\s?\/?>)$/i;var a_white=/^(<a\shref="(https?:(\/\/|\/)|ftp:(\/\/|\/)|mailto:|magnet:)[-A-Za-z0-9+&@#\/%?=~_|!:,.;\(\)]+"(\stitle="[^"<>]+")?\s?>|<\/a>)$/i;var img_white=/^(<img\ssrc="(https?:\/\/|\/)[-A-Za-z0-9+&@#\/%?=~_|!:,.;\(\)]+"(\swidth="\d{1,3}")?(\sheight="\d{1,3}")?(\salt="[^"<>]*")?(\stitle="[^"<>]*")?\s?\/?>)$/i;var pre_white=/^(<pre(\sclass="prettyprint linenums")?>|<\/pre>)$/i;function sanitizeTag(tag){if(tag.match(basic_tag_whitelist)||tag.match(a_white)||tag.match(img_white)||tag.match(pre_white))
return tag;else
return"";}
function balanceTags(html){if(html=="")
return"";var re=/<\/?\w+[^>]*(\s|$|>)/g;var tags=html.toLowerCase().match(re);var tagcount=(tags||[]).length;if(tagcount==0)
return html;var tagname,tag;var ignoredtags="<p><img><br><li><hr>";var match;var tagpaired=[];var tagremove=[];var needsRemoval=false;for(var ctag=0;ctag<tagcount;ctag++){tagname=tags[ctag].replace(/<\/?(\w+).*/,"$1");if(tagpaired[ctag]||ignoredtags.search("<"+tagname+">")>-1)
continue;tag=tags[ctag];match=-1;if(!/^<\//.test(tag)){for(var ntag=ctag+1;ntag<tagcount;ntag++){if(!tagpaired[ntag]&&tags[ntag]=="</"+tagname+">"){match=ntag;break;}}}
if(match==-1)
needsRemoval=tagremove[ctag]=true;else
tagpaired[match]=true;}
if(!needsRemoval)
return html;var ctag=0;html=html.replace(re,function(match){var res=tagremove[ctag]?"":match;ctag++;return res;});return html;}})();
/*
Copyright will Farrell

Rules:
- If str or obj appears >1x in fct, replace with var
- Assign all global vars in var.global.js
- If a property is longer then 4 charsand apears >=3 times create a get/set function

Checks:
http://www.jslint.com/
http://closure-compiler.appspot.com/home
Run document.getElementsByTagName('*').length; in console. The fewer DOM elements the better.

Options:
JS Loader


*/

// AngularJS use $event.stopPropagation();
/*function stopBubble(e) {
	e = e || window.event;
	e.cancelBubble = true;
    if (e.stopPropagation) e.stopPropagation();
};*/

// Avoid this functions as much as possible
function GetElementsByClassName( o, className ) {
	//document.getElementsByClassName(className); // temp override
	var elem = null;

	if ( o.className == className ) {
		return o;
	}
	for ( var i = 0; i < o.childNodes.length; i++ ) {
		if ( o.childNodes[i].nodeType == 1 ) {
			elem = GetElementsByClassName( o.childNodes[i], className );
			if ( elem != null ) {
				break;
			}
		}
	}

	return elem;
}

// Avoid this functions as much as possible
function GetElementById( o, id ) {
	document.getElementById(id); // temp override
	var elem = null;

	if ( o.getAttribute('id') == id ) {
		return o;
	}
	for ( var i = 0; i < o.childNodes.length; i++ ) {
		if ( o.childNodes[i].nodeType == 1 ) {
			elem = GetElementById( o.childNodes[i], id );
			if ( elem != null )
				break;
		}
	}

	return elem;
}

// src: http://stackoverflow.com/questions/9496427/how-to-get-elements-by-attribute-selector-w-native-javascript-w-o-queryselector
function getAllElementsWithAttribute(attribute, value) {
  	var matchingElements = [];
  	var allElements = document.getElementsByTagName('*');
  	for (var i = 0, l = allElements.length; i < l; i++) {
  		var attr = allElements[i].getAttribute(attribute);
    	if ('string' === typeof attr && (!value || (value && attr == value))) {
	    	return allElements[i];
	    	// Element exists with attribute. Add to array.
	    	matchingElements.push(allElements[i]);
	    }
	}
	return matchingElements;
}

/**
 * Make object, checks if Tag Name and ID.
 * If .class, grab by css class
 */
function dom$(str, o) { // id .class html[nth-child] (input[name=aaaa] - not included)
	var elem, arr, n, c, // n:name, c:child
			regex_n = /([\w\-]+)/, regex_c = /\[(\d)+\]/, regex_a = /=([\w\-\/'.]+)/,
			d = document;
	o || (o = d); // if(!o) { o = document }
	if (str) {
		arr = str.split(' ');
		//console.log(arr);
		n = regex_n.exec( arr[0] );
		//console.log(n);
		if (n[1]) {
			if (arr[0].indexOf('.') === 0) {// Class
				//elem = o.getElementsByClassName(n[1]);
				elem = (o == d) ? elem = d.getElementsByClassName(n[1]) // o == document
								: elem = GetElementsByClassName(o, n[1]);
			} else if (arr[0].indexOf('#') === 0) { // ID
				elem = (o == d) ? elem = d.getElementById(n[1]) // o == document
								: elem = GetElementById(o, n[1]);
			} else if (arr[0].indexOf('@') === 0) { // attr
				var at = regex_a.exec( arr[0] );
				elem = getAllElementsWithAttribute(n[1], (at ? at[1] : at));
				//elem = (o == d) ? elem = d.getElementByAttributed(n[1]) // o == document
				//				: elem = GetElementById(o, n[1]);
			} else {
				elem = (o == d) ? elem = d.getElementById(n[1]) // o == document
								: elem = GetElementById(o, n[1]);
				elem || ( elem = o.getElementsByTagName(n[1])); // if(!elem) { elem =  o.getElementsByTagName(n[1]); }
			}

			// get nth child if applicable
			c = regex_c.exec( arr[0] );
			if (c && c[1]) {elem = elem[c[1]];}
			//else { elem = elem[0]; } // returns array
		}

		// more elements
		//return arr[1] ? (str = str.substring(str.indexOf(arr[1]), arr.length), $(str, elem)) : elem;
		if(arr[1]) {
			str = str.substring(str.indexOf(arr[1]), str.length);
			return dom$(str,elem);
		} else {
			return elem;
		}

	}
}

// http://javascript.crockford.com/memory/leak.html
// cleans dom element to prevent memory leaks
function domPurge(d) {
    var a = d.attributes, i, l, n;
    if (a) {
        for (i = a.length - 1; i >= 0; i -= 1) {
            n = a[i].name;
            if (typeof d[n] === 'function') {
                d[n] = null;
            }
        }
    }
    a = d.childNodes;
    if (a) {
        l = a.length;
        for (i = 0; i < l; i += 1) {
            domPurge(d.childNodes[i]);
        }
    }
}

function checkObj(o) { return typeof(o) === 'object' ? o: dom$(o); }

function domRemove(id) {
    var elem=document.getElementById(id);
    domPurge(elem);
    return (elem).parentNode.removeChild(elem);
}

//-- jQuery replacements --//

function domAttr(id) {

}

function domCSS(id) {

}

function domVal(id) {
	return dom$(id).value;
}

function domHide(id) {
	setStyle(dom$(id), 'display', 'none');
}

function domShow(id) {
	setStyle(dom$(id), 'display', 'block');
}



//-- Object --//
function objectIsEmpty(obj) {
    for (var p in obj) return false;
	return true;
}

function objectLength(obj) {
  	var c = 0;
    for (var p in obj) if(obj.hasOwnProperty(p))++c;
    return c;
}

function objectFindByKey(array, key, value) {
  for (var i = 0; i < array.length; i++) {
    if (array[i][key] === value) {
      return array[i];
    }
  }
  return null;
}

function objectCheck(o) { return typeof(o) === 'object' ? o: dom$(o); }	// used in datepicker

function objectClone(obj) {
  var newObj = (obj instanceof Array) ? [] : {};
  for (i in obj) {
    if (i == 'clone') continue;
    if (obj[i] && typeof obj[i] == "object") {
      newObj[i] = objectClone(obj[i]);
    } else newObj[i] = obj[i]
  } return newObj;
}

function objectURL(obj, prefix) {
	var str = [];
	for(var p in obj) {
		var k = prefix ? prefix + "[" + p + "]" : p, v = obj[p];
		str.push(typeof v == "object" ?
			serialize(v, k) :
			encodeURIComponent(k) + "=" + encodeURIComponent(v));
	}
	return str.join("&");
}

//-- Array --//
function arrayUnique(a, id) {
	var u = {}, r = [], i, l = a.length;
	if (id) { // array of obj [{id:""},{id:""},{id:""}]
		for (i=0; i<l;i+=1) {
			if (a[i][id] in u) { // obj already placed in

			} else {
				u[a[i][id]] = a[i][id];
				r.push(a[i]);
			}
		}
		return r;
	} else { // regular array ["","","","",""]
	   for (i = 0; i < l; ++i){
		  if (a[i] in u)
			 continue;
		  r.push(a[i]);
		  u[a[i]] = 1;
	   }
	   return r;
	}
}

function inArray(needle, haystack) {
    for(var i = 0, l = haystack.length; i < l; i++) {
        if (haystack[i] == needle) return true;
    }
    return false;
}

function arrayIndexOf(a, item) {
	for(var i = 0, l = a.length; i < l; i++) {
        if (a[i] === item) {
            return i;
        }
    }
    return -1;
}

function replaceElem(o_new, o_old) {
	o_old.parentNode.replaceChild(o_new, o_old);
};

// Get
function getName(o) { return o.name; }
function getValue(o) { return o.value; }
function getType(o) { return o.type; }
function getChecked(o) { return o.checked; }

function getLength(o) { return o.length; }
function getInnerHTML(o) { return o.innerHTML; }
function getClassName(o) { return o.className; }
function getParentNode(o) { return o.parentNode; }



// Get Style
function getStyle(o, p){
	o = o.style;
	return o[p]? o[p]: null;
}
/*function getStyle(o, p){ // with idiot check
	var elm = checkObj(o);

	if (elm != null){
		if(elm.style){
			elm = elm.style;
			if(elm[p]){
				return elm[p];
			} else {
				return null;
			}
		} else {
			return null;
		}
	}
}
*/
function getStyleDisplay(o) { return getStyle(o, 'display'); }
//function getStyleDisplay(o) { return o.style.display; }

// Set
function setValue(o, v) { o.value = v; }
function setSrc(o, v) { o.src = v; }
function setInnerHTML(o, v) { o.innerHTML = v; }
// faster the setInnerHTML
function replaceInnerHTML(o, v) {
	var o_old = o;
	/*@cc_on // Pure innerHTML is slightly faster in IE
		setInnerHTML(o, v);
		return;
	@*/
	var o_new = o.cloneNode(false);
	o_new.innerHTML = v;
	replaceElem(o_new, o_old);
	/* Since we just removed the old element from the DOM, return a reference
	to the new element, which can be used to restore variable references. */
	o = o_new;
};
function setClassName(o, v) { o.className = v; }

// Set Display
function setStyle(o, p, v) { // without idiot check
	o = o.style;
	o[p] = v;
}
/*function setStyle(p, v, oid) { // from datepicker // with idiot check
	var elm = checkObj(oid);
	if((elm != null) && (elm.style != null)){
		elm = elm.style;
		elm[p] = v;
	}
}*/
function setStyleDisplay(o, v) { setStyle(o, 'display', v?'':'none'); } // v = 1 (block) or 0 (none)
//function setStyleDisplay(o, v) { o.style.display = v?'block':'none'; } // v = 1 (block) or 0 (none)

// Other
function toggleStyleDisplay(o) { var z = (getStyleDisplay(o) === 'none') ? setStyleDisplay(o, 1) : setStyleDisplay(o, 0); } // unused var z - appease JSlint
function toggleValue(o, text1, text2) {
	getInnerHTML(o) === text1 ?
		setInnerHTML(o, text2):
	getInnerHTML(o) === text2 &&
		setInnerHTML(o, text1);
}

function addInnerHTML(o, t, p) { // object, text, pre/post = 0/1
	//var str = p?t+getInnerHTML(o):getInnerHTML(o)+t;
	//setInnerHTML(o, str);
	setInnerHTML(o, p?getInnerHTML(o)+t:t+getInnerHTML(o));
}



function onEnter(e) { if (e === 13) { return true; } }

function domRemove(obj) {
	if(obj != null)
		obj.parentNode.removeChild(obj);
}

function addEvent(obj, evType, fn){
 if (obj.addEventListener){
   obj.addEventListener(evType, fn, false);
   return true;
 } else if (obj.attachEvent){
   var r = obj.attachEvent("on"+evType, fn);
   return r;
 } else {
   return false;
 }
}







function getFormData(form_ID) {
	obj = dom$(form_ID);
	var data = {};
	var name, value, name_pattern = /[\[\]]/;
	// input
	var inputs = obj.getElementsByTagName('input');
	for (var i=0; i<inputs.length; i++) {
		//if (inputs[i].type != 'submit') {
		value = null;
		if (inputs[i].type == 'checkbox' || inputs[i].type == 'radio') {
			if (inputs[i].checked) {
				value = inputs[i].value;
			}
		} else {
			value = inputs[i].value;
		}
		if (value) {
			name = inputs[i].name.split(name_pattern);
			if (name.length == 1) {
				data[name[0]] = value;
			} else {
				if(typeof data[name[0]]==="undefined") { data[name[0]]={}; };
				data[name[0]][name[1]] = value;
			}
		}
		//}
	}

	// select
	var selects = obj.getElementsByTagName('select');
	for (var i=0; i<selects.length; i++) {
		name = selects[i].name.split(name_pattern);
		if (name.length == 1) {
			data[name[0]] = selects[i].value;
		} else {
			if(typeof data[name[0]]==="undefined") { data[name[0]]={}; };
			data[name[0]][name[1]] = selects[i].value;
		}
		//data[selects[i].name] = selects[i].value;
	}

	// textarea
	var fields = obj.getElementsByTagName('textarea');
	for (var i=0; i<fields.length; i++) {
		name = fields[i].name.split(name_pattern);
		if (name.length == 1) {
			data[name[0]] = fields[i].value;
		} else {
			if(typeof data[name[0]]==="undefined") { data[name[0]]={}; };
			data[name[0]][name[1]] = fields[i].value;;
		}
		//data[fields[i].name] = fields[i].value;
	}

	return data;
}

/**
 *	Grabs variable from address bar
 *	@param	string
 *
function _GET(key) {
	var query = window.location.search.substring(1),
			vars = query.split("&");
	for (var i = 0, pair; i < vars.length; i++) {
		pair = vars[i].split("=");
		if (pair[0] == key) return pair[1];
	}
	return null;
}*/

/*
function (e) {
	e = e || event;
	var target = e.target || e.srcElement;
}
*/



function format(string, mask) {
	if (!string) return string;		// string undefined
	mask || (mask = "w");
	var defs = {
		'9': "[0-9]",
		'a': "[A-Za-z]",
		'*': "[A-Za-z0-9]",
		// regex
		'w': "[\w]",
		'W': "[\W]",
		's': "[\s]",
		'S': "[\S]",
		'd': "[\d]",
		'D': "[\D]"
	};
	var output = "";
	var string_pos = 0;
	var mask_pos = 0;
	string.split("");
	mask.split("");
	while (mask_pos < mask.length && string_pos < string.length) {
		var s = string[string_pos];
		var f = mask[mask_pos];
		if (defs[f]) {
			var regex = new RegExp(defs[f]);
			if (regex.exec(s)) {
				output += s;
				mask_pos++;
			}
			string_pos++;
		} else {
			output += f;
			mask_pos++;
		}

	}
	return output;
};

// pop ups //
// Universal clipboard button - ** move to general phonegap fct
function clipboard(text) {
  	window.prompt("Copy to clipboard: Ctrl+C, enter", text);
}

// Date //
// utc = number of seconds; local = number on miliseconds
// php unix timestamp in UTC -> local{timestamp, day, time}
function unix2date(unix) {
	var date 		= {};
    date.time 		= unix*1000;
    date.obj 		= new Date(date.time);
	date.timezone 	= date.obj.getTimezoneOffset()*60000;
	
	var m = new RegExp(/\((\w*)\)/).exec(date.obj.toString());
	date.timezone_str = (m === null) ? "" : m[1];

    //date.time 		= date.obj.getTime();		// timestamp
    date.year 		= date.obj.getFullYear();
    date.month 		= date.obj.getMonth()+1;
    date.day 		= date.obj.getDate();
    date.hour 		= date.obj.getHours();
    date.min 		= date.obj.getMinutes();
    date.sec		= date.obj.getSeconds();

    date.day_min 	= date.hour*60 + date.min;	// min in the day
    date.time_day 	= date.time - date.day_min*60000; // miliseconds to day start

    date.str = date.obj.toString();//date.year+'-'+date.month+'-'+date.day+' '+date.hour+':'+date.min+':'+date.sec;

	return date;
}
// local{timestamp, day, time} -> php unix time
function date2unix(timestamp, date, min) {
	if (date) {
		min || (min = 0);
		var d = +new Date(date);
		timestamp = d + min*60000;
	}
	var timezone = new Date(timestamp).getTimezoneOffset()*60;
	return timestamp/1000 - timezone;
}

// db.set("nav_more", settings.sync(this.more, db.get("nav_more", this.more)));
function syncVar(new_obj, old_obj) {
	if (old_obj === undefined) {
		//log("old_obj = undefined");
		old_obj = new_obj;
	} else if (typeof(new_obj) == 'object' && typeof(old_obj) == 'object') {
		//log("new_obj = Object");
		old_obj = syncObject(new_obj, old_obj);
	} else if (typeof(new_obj) == 'array' && typeof(old_obj) == 'array') {
		//log("new_obj = Array");
		old_obj = syncArray(new_obj, old_obj);
	}
	return old_obj;
}

function syncObject(new_obj, old_obj) {
	//log("==sync_loop_object==");
	//log("new");
	//log(new_obj);
	//log("old");
	//log(old_obj);
	for (var i in new_obj) {
		//console.log("new typeof "+typeof(new_obj[i]));
		if (old_obj[i] === undefined) {
			//log("old_obj = undefined");
			old_obj[i] = new_obj[i];
		} else if (typeof(new_obj[i]) == 'object') {
			//log("new_obj = Object");
			old_obj[i] = syncObject(new_obj[i], old_obj[i]);
		} else if (typeof(new_obj[i]) == 'array') {
			//log("new_obj = Array");
			old_obj[i] = syncArray(new_obj[i], old_obj[i]);
		} else {	// string, number, bool, etc
			old_obj[i] = new_obj[i];
		}
		//log("old state");
		//log(old_obj);
	}
	return old_obj;
}

function syncArray(new_obj, old_obj) {
	//log("==sync_loop_array==");
	//log("new");
	//log(new_obj);
	//log("old");
	//log(old_obj);
	for (var i = 0, l = new_obj.length; i < l; i++) {
		//log("new typeof "+typeof(new_obj[i]));
		if (typeof(new_obj[i]) == 'object') {
			//log("new_obj = Object");
			old_obj.push(syncObject(new_obj[i], old_obj[i]));
		} else if (typeof(new_obj[i]) == 'array') {
			//log("new_obj = Array");
			old_obj.push(syncArray(new_obj[i], old_obj[i]));
		} else {
			//log("new_obj = Other");
			old_obj.push(new_obj[i]);
		}
		//log("old state");
		//log(old_obj);
	}
	return old_obj;
}

function nl2br(str){
	return str.replace( /\n/g, '<br />\n' );
}

function numberPadding(number, length){
    var str = "" + number;
    while (str.length < length) {
        str = '0'+str;
    }
    return str;
}

// used to create unique color from string
function strToARGB(str) {
	var hash = 0;
    for (var i = 0; i < str.length; i++) {
       hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    return ((hash>>24)&0xFF).toString(16) +
           ((hash>>16)&0xFF).toString(16) +
           ((hash>>8)&0xFF).toString(16) +
           (hash&0xFF).toString(16);
}

/*
//== To Do ==//
-add update fucntions
-merge [g|s]etAllArray and [g|s]etAllObject into one

//== Important Notes ==//
-JSON.parse() and JSON.stringify() are built-in
-"keys" is a reserved key name for keyDB objects

//== Examples ==//

//= General Examples =//
db.get('key');
db.set('key', {});
db.remove('key');
db.clear();

db.keyDB_name.get('key');
db.keyDB_name.set('key', {});
db.keyDB_name.remove('key');
db.keyDB_name.clear();

var list = db.keyDB_name.keys; 	// get list of keys
var obj = db.keyDB_name.obj;	// get default obj

//= init Examples =//
var test = {}
if (storage) {
	test = db.get('test', test);
} else {
	alert('Your browser seems to be in Private Mode. Please disable it if you\'d like your settings saved for your next visit.');
}

//= Creating a keyDB =//
db.name = new keyDB(
	"name", 				// DB prefix for all keys
	{						// default object (optinal)
		"key":"",
		"value":"",
		"timestamp":Date.now(),
	}
);


*/

// localStorage db wrapper
var db = {
	on: false,			// bool - if localStorage is enabled in browser
	ls: localStorage, 	// localStorage short name - obfusification

	/**
	 * set 'on' bool for those that want to
	 * test if localStorage is enabled
	 *
	 * call from below
	 *
     * @this {Object}
     */
	init: function() {
		var uid = +new Date(),
			result;
		try {
			result = this.get(uid, uid) == uid;
			this.remove(uid);
			this.on = result;
		} catch( e ) {}
	},

	// Main Functions //

	/**
     * @this {Object}
     */
	get: function(key, default_obj) {
		//console.log("db.get('"+key+"', "+JSON.stringify(default_obj)+")");
		if ( default_obj !== 'undefined' && !this.ls.getItem(key)) {
			this.set(key, default_obj);
		}
		//console.log(this.ls.getItem(key));
		var result = this.ls.getItem(key);

		if ( result === 'undefined' ) {
			return result;
		} else {
			return JSON.parse(result);
		}
		// if (result === typeof Object)
	},

	/**
     * @this {Object}
     */
	set: function(key, obj) {
		//console.log("db.set('"+key+"', "+JSON.stringify(obj)+")");
		if (key !== null) this.ls.setItem(key, JSON.stringify(obj));
	},

	/**
     * @this {Object}
     */
	remove: function(key) {
		this.ls.removeItem(key);
	},

	// clears ALL localStorage - only call if you're sure
	/**
     * @this {Object}
     */
	clear: function() {
		this.ls.clear();
	}
};

db.init();

// Keyed DB Class
// keyDB("id", {})
// "keys" is a reserved keyname
/**
 * @this {Object}
 */
function keyDB(id, default_obj) {
	this.id = id ? id+"_" : "_"; // prefix for all keys, end with _
	this.keys = db.get(this.id+'keys', []);
	this.obj = default_obj || {}; // default object being stored
}


keyDB.prototype.get = function(key, default_obj) {
	//console.log("keyDB.get("+key+")");
	return db.get(this.id+key, default_obj);
};

keyDB.prototype.set = function(key, obj) {
	if (obj == 'undefined' || key == 'undefined') return;	// don't set undefined
	//console.log("keyDB.set("+key+", ");
	//console.log(obj);
	//console.log(")");
	db.set(this.id+key, obj);
	// save key in keychain if not already there
	var index = this.keys.indexOf(key);
	//console.log(index);
	if ( index === -1 ) { // if not in keys
		this.keys.push(key);
		//console.log(this.keys);
		db.set(this.id+'keys', this.keys);
	}
};

keyDB.prototype.remove = function(key) {
	db.remove(this.id+key);
	// remove key in keychain
	var index = this.keys.indexOf(key);
	if (index !== -1) { // if in keys
		this.keys.splice(index, 1);
		db.set(this.id+'keys', this.keys);
	}
};

/**
 * list = [] - default container
 */
keyDB.prototype.getAllArray = function(key, list_default) {
	if (typeof(list_default) == 'function') list_default = list_default();
	var list = [];
	for (var i = 0, l = this.keys.length; i < l; i++) {
		list.push(this.get(this.keys[i]));
	}
	if (!list.length && key && list_default) {
		this.setAllArray(key, list_default);
		list = list_default;
	}
	return list;
};

/**
 * list = {} - default container
 */
keyDB.prototype.getAllObject = function(list_default) {
	if (typeof(list_default) == 'function') list_default = list_default();
	var list = {};
	for (var i = 0, l = this.keys.length; i < l; i++) {
		list[this.keys[i]] = this.get(this.keys[i]);
	}
	if (!list.length && list_default) {
		this.setAllObject(list_default);
		list = list_default;
	}
	return list;
};

/**
 * key = string key name
 * list = [] - default container
 */
keyDB.prototype.setArray = function(key, list) {
	if (!key) return;	// return if no key

	for (var i = 0, l = list.length; i < l; i++) {
		//console.log(list[i]);
		this.set(list[i][key], list[i]);
	}
};

/**
 * list = key:{key:key, ...} - default container
 */
keyDB.prototype.setObject = function(list) {
	for (var i in list) {
		this.set(i, list[i]);
	}
};

/**
 * key = string key name
 * list = [] - default container
 */
keyDB.prototype.setAllArray = function(key, list) {
	if (!key) return;	// return if no key
	this.clear();

	this.setArray(key, list);
};

/**
 * list = key:{key:key, ...} - default container
 */
keyDB.prototype.setAllObject = function(list) {
	this.clear();
	this.setObject(list);
};

/**
 * remove all keys from ls
 */
keyDB.prototype.clear = function() {
	//this.ls.clear();
	for (var i = 0, l = this.keys.length; i < l; i++) {
		db.remove(this.id+this.keys[i]);
	}
	db.remove(this.id+'keys');
};

angular.module('ng.components', []).
  directive('tabs', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: {},
      controller: function($scope, $element) {
        var panes = $scope.panes = [];
 
        $scope.select = function(pane) {
          angular.forEach(panes, function(pane) {
            pane.selected = false;
          });
          pane.selected = true;
        }
 
        this.addPane = function(pane) {
          if (panes.length == 0) $scope.select(pane);
          panes.push(pane);
        }
      },
      template:
        '<div class="tabbable">' +
          '<ul class="nav nav-tabs">' +
            '<li data-ng-repeat="pane in panes" data-ng-class="{active:pane.selected}">'+
              '<a href="" data-ng-click="select(pane)">{{pane.title}}</a>' +
            '</li>' +
          '</ul>' +
          '<div class="tab-content" data-ng-transclude></div>' +
        '</div>',
      replace: true
    };
  }).
  directive('pane', function() {
    return {
      require: '^tabs',
      restrict: 'E',
      transclude: true,
      scope: { title: '@' },
      link: function(scope, element, attrs, tabsCtrl) {
        tabsCtrl.addPane(scope);
      },
      template:
        '<div class="tab-pane" data-ng-class="{active: selected}" data-ng-transclude>' +
        '</div>',
      replace: true
    };
  });

/*
 * Defines the ui-if tag. This removes/adds an element from the dom depending on a condition
 * Originally created by @tigbro, for the @jquery-mobile-angular-adapter
 * https://github.com/tigbro/jquery-mobile-angular-adapter
 */
angular.module('ui.directives.if', [])
.directive('uiIf', [function () {
  return {
    transclude: 'element',
    priority: 1000,
    terminal: true,
    restrict: 'A',
    compile: function (element, attr, linker) {
      return function (scope, iterStartElement, attr) {
        iterStartElement[0].doNotMove = true;
        var expression = attr.uiIf;
        var lastElement;
        var lastScope;
        scope.$watch(expression, function (newValue) {
          if (lastElement) {
            lastElement.remove();
            lastElement = null;
          }
          if (lastScope) {
            lastScope.$destroy();
            lastScope = null;
          }
          if (newValue) {
            lastScope = scope.$new();
            linker(lastScope, function (clone) {
              lastElement = clone;
              iterStartElement.after(clone);
            });
          }
          // Note: need to be parent() as jquery cannot trigger events on comments
          // (angular creates a comment node when using transclusion, as ng-repeat does).
          iterStartElement.parent().trigger("$childrenChanged");
        });
      };
    }
  };
}]);
angular.module('io.directive.htmlExtend', [])
.directive( [ 'focus', 'blur', 'keyup', 'keydown', 'keypress' ].reduce( function ( container, name ) {
    var directiveName = 'ng' + name[ 0 ].toUpperCase( ) + name.substr( 1 );

    container[ directiveName ] = [ '$parse', function ( $parse ) {
        return function ( scope, element, attr ) {
            var fn = $parse( attr[ directiveName ] );
            element.bind( name, function ( event ) {
                scope.$apply( function ( ) {
                    fn( scope, {
                        $event : event
                    } );
                } );
            } );
        };
    } ];

    return container;
}, { } ) );

angular.module('io.directive.inputMask', [])
// requires format(str,mask)
// data-input-mask="(999) 999-9999 x999999"
.directive('inputMask', [function() {
	return {
		require: 'ngModel',
		link: function(scope, element, attrs, controller) {
			
			// view -> model
			element.bind('keyup', function(event) {
				//console.log('inputMask');
				//console.log(element);
				//console.log(attrs);
				//console.log(controller);
				
				// see ui-keypressHelper
				var shiftPressed = event.shiftKey;
		        var keyCode = event.keyCode;
		        var cursorPos = element.prop("selectionStart");
		        
		        // normalize keycodes
			    if (!shiftPressed && keyCode >= 97 && keyCode <= 122) {
			        keyCode = keyCode - 32;
			    }
		        
		        if (keyCode >= 48 && keyCode <= 90) {
			        scope.$apply(function() {
						value = format(controller.$viewValue, attrs.inputMask);
						element.val(value);
						controller.$setViewValue(value.replace(/[^a-zA-Z0-9]+/g,'')); // clean modal var
						// re place caret
						/*if (element.setSelectionRange) {
							element.setSelectionRange(cursorPos, cursorPos);
						} else if (element.createTextRange) {
							var range = element.createTextRange();
	                        range.collapse(true);
	                        range.moveEnd('character', cursorPos);
	                        range.moveStart('character', cursorPos);
	                        range.select();
						}*/						
					});
		        }
				
			});
			
			// model -> view
			controller.$render = function() {
				if (controller.$viewValue) {
					var value = format(controller.$viewValue, attrs.inputMask);
					element.val(value);
					controller.$setViewValue(value.replace(/[^a-zA-Z0-9]+/g,'')); // clean modal var
				}
			};
		}
	};
}]);
angular.module('io.directive.markdown', [])
// <markdown>
.directive('markdown', function() {
  	var converter = new Markdown.getSanitizingConverter();
  	
  	return {
        restrict: 'E',
        link: function(scope, element, attrs) {
            element.html(converter.makeHtml(element.text()));
        }
    }
});

angular.module('io.filter.range', [])
// http://danielcsgomes.com/tutorials/how-to-create-a-custom-filter-with-angularjs-v1/
.filter('range', function() {
	return function(input, start, end, step) {
		if (isNaN(end)) {
			end = start;
			start = 0;
		}
		if (isNaN(step)) {
			step = 1;
		}
		
		start = parseInt(start);
		end = parseInt(end);
		
		// flip start/end
		if (start > end) {
			var tmp = start;
			start = end;
			end = tmp;
		}
		
		for (var i=start; i<end; i += step) {
			input.push(i.toString());
		}
		
		return input;
	};
});

angular.module('io.filter.truncate', [])
// http://danielcsgomes.com/tutorials/how-to-create-a-custom-filter-with-angularjs-v1/
.filter('truncate', function() {
	return function(text, length, end) {
		if (isNaN(length)) length = 10;
		if (end === undefined) end = "...";
		if (text.length <= length || text.length - end.length <= length) {
			return text;
		} else {
			return String(text).substring(0, length - end.length) + end;
		}
	};
});
angular.module('io.filter.format', [])
// phone number {{ value | phone }}
.filter('format', function() {
	return function(string, mask) {
		return format(string, mask || "w");
	};
})
.filter('phone', function() {
	return function(string, mask) {
		return format(string, mask || "(999) 999-9999 x99999");
	};
});
(function (angular) {
angular.module('io.factory.follow', [])
.factory('$follow', ['$rootScope', '$http', function($rootScope, $http) {
	console.log('FollowFactory ('+$rootScope.$id+')');
	
	var $scope = {};
	$scope.version = '0.2.0';
	
	// init root follow obj - list of all profiles viewed
	$scope.init = function(company_ID, user_ID, following) {
		console.log('init('+company_ID+','+user_ID+')');
		
		company_ID || (company_ID = 0);
		user_ID || (user_ID = 0);
		following || (following = false);
		
		$scope.db || ($scope.db = {});
		$scope.db.groups || ($scope.db.groups = {});
		$scope.db.company || ($scope.db.company = {});
		$scope.db.user || ($scope.db.user = {});
		
		if (company_ID) {
			$scope.db.company[company_ID] || ($scope.db.company[company_ID] = {});
			$scope.db.company[company_ID].company_ID = company_ID;
			$scope.db.company[company_ID].following = following;
			$scope.db.company[company_ID].groups || ($scope.db.company[company_ID].groups = []);
		} else if (user_ID) {
			$scope.db.user[user_ID] || ($scope.db.user[user_ID] = {});
			$scope.db.user[user_ID].user_ID = user_ID;
			$scope.db.user[user_ID].following = following;
			$scope.db.user[user_ID].groups || ($scope.db.user[user_ID].groups = []);
		}
	};
	
	$scope.addFollow = function(company_ID, user_ID, group_ID) {
		console.log('addFollow("'+company_ID+'", "'+user_ID+'", "'+group_ID+'")');
		if (!company_ID && !user_ID) return;
		
		company_ID || (company_ID = 0);
		user_ID || (user_ID = 0);
		group_ID || (group_ID = 0);
		
		$scope.init(company_ID, user_ID, true);
		
		if (group_ID) {
			if (company_ID) $scope.db.company[company_ID].groups.push(group_ID);
			else if (user_ID) $scope.db.user[user_ID].groups.push(group_ID);
		}
		
		//console.log($scope.db[type][id]);
		$http.put($rootScope.settings.server+'/follow/'+company_ID+'/'+user_ID+'/'+group_ID)
			.success(function(data) {
				console.log('addFollow.put.success');
				console.log(data);
				//$scope.dbing[id].name = data.name;
			})
			.error(function() {
				console.log('addFollow.put.error');
				$rootScope.http_error();
			});
	};

	$scope.deleteFollow = function(company_ID, user_ID, group_ID) {
		console.log($rootScope.settings.server+'deleteFollow('+company_ID+', '+user_ID+', '+group_ID+')');
		
		company_ID || (company_ID = 0);
		user_ID || (user_ID = 0);
		group_ID || (group_ID = 0);
		
		//$scope.init(type, id);
		
		if (group_ID) {
			if (user_ID) {
				var index = $scope.db.user[user_ID].groups.indexOf(group_ID);
				if (index != -1) delete $scope.db.user[user_ID].groups.splice(index,1);
				$scope.db.groups[group_ID.toString()].group_count--;
			} else if (company_ID) {
				var index = $scope.db.company[company_ID].groups.indexOf(group_ID);
				if (index != -1) delete $scope.db.company[company_ID].groups.splice(index,1);
				$scope.db.groups[group_ID.toString()].group_count--;
			}
			
		} else {
			if (user_ID) {
				$scope.db.user[user_ID].following = false;
				$scope.db.user[user_ID].groups = [];
			} else if (company_ID) {
				$scope.db.company[company_ID].following = false;
				$scope.db.company[company_ID].groups = [];
			}
			
			
		}
		
		$http({'method':'DELETE', 'url':$rootScope.settings.server+'/follow/'+company_ID+'/'+user_ID+'/'+group_ID})
			.success(function() {
				console.log('deleteFollow.put.success');
			})
			.error(function() {
				console.log('deleteFollow.put.error');
				$rootScope.http_error();
			});
	};

	// load follow details of a user - use on profile page
	$scope.loadFollow = function(company_ID, user_ID) {
		console.log('loadFollow('+company_ID+', '+user_ID+')');
		
		company_ID || (company_ID = 0);
		user_ID || (user_ID = 0);
		
		$http.get($rootScope.settings.server+'/follow/'+company_ID+'/'+user_ID)
			.success(function(data) {
				console.log('loadFollow.get.success');
				console.log(data);
				$scope.db.company[data.company_ID] = data;
				$scope.db.user[data.user_ID] = data;
				$scope.f = data;
			})
			.error(function() {
				console.log('loadFollow.put.error');
				$rootScope.http_error();
			});
	};
	
	$scope.loadFollowers = function(company_ID, user_ID, query) {
		
		company_ID || (company_ID = 0);
		user_ID || (user_ID = 0);
		query || (query = '');
		
		$http.get($rootScope.settings.server+'/follow/ers/'+company_ID+'/'+user_ID+'/'+query)
			.success(function(data) {
				console.log('loadFollowers.get.success');
				console.log(data);
				for (var i in data) {
					if (i) {
						data[i].following = (data[i].following) ? true : false;
						data[i].follower = true;
						$scope.db[type][i] = data[i];
					} else {
						delete data[i];
					}
				}
			})
			.error(function() {
				console.log('loadFollowers.get.error');
				$rootScope.http_error();
			});
	};

	$scope.loadFollowing = function(company_ID, user_ID, query) {
		company_ID || (company_ID = 0);
		user_ID || (user_ID = 0);
		query || (query = '');
		
		$http.get($rootScope.settings.server+'/follow/ing/'+company_ID+'/'+user_ID+'/'+query)
			.success(function(data) {
				console.log('loadFollowing.get.success');
				console.log(data);
				console.log(typeof data);
				for (var i = 0, l = data.length; i < l; i++) {
					data[i].following = (data[i].following) ? true : false;
					if (data[i]['company_ID']) $scope.db.company[data[i]['company_ID']] = data[i];
					else if (data[i]['user_ID']) $scope.db.user[data[i]['user_ID']] = data[i];
				}
				
			})
			.error(function() {
				console.log('loadFollowing.get.error');
				$rootScope.http_error();
			});
	};
	
	$scope.loadGroups = function() {
		console.log('loadGroups()');
		$http.get($rootScope.settings.server+'/follow/group/')
			.success(function(data) {
				console.log('loadGroups.get.success');
				console.log(data);
				for (var i in data) {
					$scope.db.groups[i] = data[i];
				}
			})
			.error(function() {
				console.log('loadGroups.get.error');
				$rootScope.http_error();
			});
	};
	
	$scope.addGroup = function(group_name) {
		console.log('addGroup('+group_name+')');
		var color = strToARGB(group_name).substr(0,6);
		$http.post($rootScope.settings.server+'/follow/group/', {'group_name':group_name, 'color':color})
			.success(function(data) {
				console.log('addGroup.post.success');
				console.log(data);
				$scope.db.groups[data.toString()] = {
					group_name:group_name,
					group_ID:data,
					group_count:0,
					color:color
				};
				console.log($scope.db.groups);
				$scope.group_name = ""; // clear form
			})
			.error(function() {
				console.log('addGroup.post.error');
				$rootScope.http_error();
			});
	};

	$scope.removeGroup = function(group_ID) {
		console.log('removeGroup('+group_ID+')');
		$http({'method':'DELETE', 'url':$rootScope.settings.server+'/follow/group/'+group_ID})
			.success(function(data) {
				console.log('removeGroup.delete.success');
				console.log(data);
				delete $scope.db.groups[group_ID];
				for (var id in $scope.db.company) {
					if ($scope.db.company[id].groups) {
						var index = $scope.db.company[id].groups.indexOf(group_ID);
						if (index != -1) delete $scope.db.company[id].groups.splice(index,1);
					}
				}
				for (var id in $scope.db.user) {
					if ($scope.db.user[id].groups) {
						var index = $scope.db.user[id].groups.indexOf(group_ID);
						if (index != -1) delete $scope.db.user[id].groups.splice(index,1);
					}
				}
			})
			.error(function() {
				console.log('removeGroup.delete.error');
				$rootScope.http_error();
			});
	};
	
	// load on signin
	$rootScope.$watch('session.user_ID', function(value) {
      	if (value) {
      		$scope.loadGroups();
      		$scope.init();
	}
    });
	
	return $scope;
}]);

})(angular);
//(function (angular) {
angular.module('io.factory.filepicker', [])
.factory('$filepicker', ['$rootScope', '$http', function($rootScope, $http) {
	console.log('FilepickerFactory ('+$rootScope.$id+')');
	
	var $scope = {};
	$scope.version = '0.2.0';
	$scope.alerts = [];
	
	$scope.services = {
		'':{
			'name':'Filepicker',
			'icon':'upload-alt'
		},
		'DOWNLOAD':{
			'name':'Download',
			'icon':'cloud-download'
		},
		'RESIZECROP':{
			'name':'Resize & Crop Image',
			'icon':'fullscreen'
		},
		'CAMERA':{
			'name':'Take Picture',
			'icon':'camera-retro'
		},
		'COMPUTER':{
			'name':'My Computer',
			'icon':'home'
		},
		'URL':{
			'name':'Link (URL)',
			'icon':'link'
		},
		'FTP':{
			'name':'FTP',
			'icon':'hdd'
		},
		'WEBDAV':{
			'name':'WebDAV',
			'icon':'hdd'
		},
		'DROPBOX':{
			'name':'Dropbox',
			'icon':'dropbox',
			'url':'https://dropbox.com/'
		}
	};
	
	// defaults
	$scope.args_upload = {
		type:'UPLOAD',
		action:'',
		types: ['*/*'],	// image/*
		extensions: [],	// ['.png','.jpg']
		services: ['COMPUTER', 'URL'],
		service: 'COMPUTER',
		multi:true,
		ID:''		// params passed to backend, ie object_ID
	};
	
	$scope.args_download = {
		type:'DOWNLOAD',
		action:'',
		files:{},
		services: ['COMPUTER'],
		service: 'COMPUTER',
		ID:''		// params passed to backend, ie object_ID
	};

	$scope.args = {};
	$scope.accept = '';
	$scope.timestamp = +new Date();
	$scope.dropzone_name = 'files';
	
	$scope.loadFiles = function() {
		if (!$scope.args.multi) return;
		// get files json
		$http.get($rootScope.settings.server+'/filepicker/list/'+$scope.args.action+'/'+$scope.args.ID)
			.success(function(data) {
				$scope.args.files = data;
			})
			.error(function() {
				
			});
	};
	
	$scope.upload = function(args, ID) {
		ID || (ID = '');
		console.log(args);
		console.log(ID);
		$scope.alerts = [];
		
		$scope.args = syncVar(args, $scope.args_upload);
		$scope.args.ID = ID;
		
		$scope.cameraModernizr(); // incase camera is default
		$scope.location($scope.args.service);
		$scope.loadFiles();
		
		// input accept tag
		$scope.accept = $scope.args.extensions.length ? $scope.args.extensions.join(',') : $scope.args.types.join(',');
		
		$scope.setDropzoneName();
		$('#filepickerModal').modal('show');
	};
	
	$scope.view = function(args, ID) {
		ID || (ID = '');
		console.log(ID);
		$scope.alerts = [];
		
		$scope.args = syncVar(args, $scope.args_download);
		$scope.args.ID = ID;
		
		$scope.loadFiles();
		
	};
	
	$scope.download = function(args, ID) {
		ID || (ID = '');
		console.log(ID);
		$scope.alerts = [];
		
		$scope.args = syncVar(args, $scope.args_download);
		$scope.args.ID = ID;
		
		$scope.loadFiles();
		
		$('#filepickerModal').modal('show');
	};
	
	$scope.downloadFile = function(file) {
		$http.post($rootScope.settings.server+'/filepicker/download/'+$scope.args.action+'/'+$scope.args.ID, {"file":file})
			.success(function(data) {
				console.log(data);
				if (data.errors) $scope.errors = data.errors;
				if (data.alerts) $scope.alerts = data.alerts;
				
				if (!data.errors && !data.alerts) {
					$rootScope.alerts = [{"class":"success", "label":"File deleted"}];
				}
			})
			.error(function() {
				
			});
	}
	
	
	$scope.confirmDelete = function(file, callback) {
		console.log('filepicker.confirmDelete()');
		$rootScope.modal = {
			hide:{
				header:false,
				close:false,
				footer:false
			},
			header:"Confirm File Delete",
			content:"Are you sure you want to delete '"+file+"'?",
			buttons:[
				{
					"class":"btn-primary",
					value:"Delete",
					callback:function(){
						callback(file);
					}
				},
				{
					"class":"",
					value:"Cancel",
					callback:function(){}
				}
			]
		};
		$('#alertModal').modal('show');
	};
	
	$scope.delete = function(file) {
		$http.delete($rootScope.settings.server+'/filepicker/'+$scope.args.action+'/'+$scope.args.ID+'/'+encodeURIComponent(file))
			.success(function(data) {
				if (data.errors) $scope.errors = data.errors;
				if (data.alerts) $scope.alerts = data.alerts;
				
				if (!data.errors && !data.alerts) {
					$rootScope.alerts = [{"class":"success", "label":"File deleted"}];
					$scope.view($scope.args, $scope.args.ID); // reload list
				}
			})
			.error(function() {
				
			});
	};

	$scope.close = function() {
		this.timestamp = +new Date(); // used to force image to be reloaded
	};
	
	$scope.location = function(service) {
		if (service == 'CAMERA') {
			$scope.cameraInit();
		}
		
		$scope.args.service = service;
	};
	
	$scope.setDropzoneName = function() {
		/*if ($scope.args.cropresize) {
        	$scope.dropzone_name = ok ? 'image' : '!image';
    	} else {
        	$scope.dropzone_name = ok ? 'file' : '!file';
    	}*/
    	if ($scope.args.resizecrop) {
        	$scope.dropzone_name = 'image';
    	} else {
        	$scope.dropzone_name = 'file';
    	}
	};
	
	//-- Camera --//
	$scope.camera = {};
	$scope.cameraModernizr = function() {
		console.log('cameraModernizr');
		// check if able - if not disable
		var hasUserMedia = function() {
		    if (!navigator.getUserMedia) {
		        navigator.getUserMedia = navigator.webkitGetUserMedia ||
		            navigator.mozGetUserMedia || navigator.msGetUserMedia;
		    }
		    if (!window.URL) {
		        window.URL = window.webkitURL || window.mozURL;
		    }
		    return !!(navigator.getUserMedia);
		}
		
		if (!hasUserMedia()) {
			console.log('!hasUserMedia');
			$scope.cameraRemove();
		}
	};
	$scope.cameraRemove = function() {
		// remove from list of services
	    $scope.args.services.splice($scope.args.services.indexOf('CAMERA'), 1);
	    // reset current service if camera
	    if ($scope.args.service === 'CAMERA') {
		    $scope.args.service = $scope.args.services[0];
	    }
	};
	$scope.cameraInit = function() {
		if (!navigator.getUserMedia) {
		        navigator.getUserMedia = navigator.webkitGetUserMedia ||
		            navigator.mozGetUserMedia || navigator.msGetUserMedia;
		    }
		    if (!window.URL) {
		        window.URL = window.webkitURL || window.mozURL;
		    }
		    
		// load in
		var dom = document.getElementById("camera");
		$scope.camera.video = dom.querySelector('video');
		$scope.camera.canvas = dom.querySelector('canvas');
		$scope.camera.canvas.width = $scope.args.width * 2;
	    $scope.camera.canvas.height = $scope.args.height * 2;
		$scope.camera.ctx = $scope.camera.canvas.getContext('2d');
		//$scope.camera.img = dom.querySelector('img');
		//$scope.camera.link = document.createElement('a');
	
	    var failure = function(e) {
	        console.log("camera Fail", e);
	        $scope.cameraRemove();
	    };
	
	    var success = function(stream) {
	    	
	        if (/Chrome/.test(navigator.userAgent)) {
	          	$scope.camera.video.src = window.URL.createObjectURL(stream);
	        } else {
	          	$scope.camera.video.src = stream;
	        }
	        $scope.camera.stream = stream;	// for stopping
	        
	        $scope.camera.video.width = $scope.camera.canvas.width;
	    	$scope.camera.video.height = $scope.camera.canvas.height;
	    	
	        // Note: onloadedmetadata doesn't fire in Chrome when using it with getUserMedia.
	        // See crbug.com/110938.
	        $scope.camera.video.onloadedmetadata = function(e) {
	            console.log("metadata loaded");
	        }
	    }
	
	    navigator.getUserMedia({video:true}, success, failure);
	
	    /*$scope.camera.video.addEventListener('click', function() {
	        //var width = this.videoWidth;
	        //var height = this.videoHeight;
	        //canvas.width = width;
	        //canvas.height = height;
	        
	        // draw webcam picture in canvas
	        $scope.camera.ctx.drawImage(video, 0, 0);
	        // create data URL and insert into <img/>
	        $scope.camera.img.src = $scope.camera.canvas.toDataURL('image/png');
	        // download picture when clicking on it
	        $scope.camera.img.onclick = function() {
	            // set filename for downloading picture
	            // https://developer.mozilla.org/en-US/docs/HTML/Element/a#attr-download
	           // $scope.camera.link.setAttribute('download', 'webcam-'+location.hostname+'-'+Date.now()+'.png');
	            //$scope.camera.link.href = $scope.camera.canvas.toDataURL('image/png');
	            //$scope.camera.link.click();
	        };
	        
	        $scope.camera.img.data = $scope.camera.canvas.toDataURL($scope.camera.img.type);
	        
	    }, false);*/
	};
	// doesn't work
	$scope.cameraStop = function() {
		$scope.camera.video.pause();
		$scope.camera.stream.stop();
		
		// For Opera 12
		$scope.camera.video.src=null;
		
		//For Firefox Nightly 18.0
		$scope.camera.video.mozSrcObject=null;
		
		//For Chrome 22
		$scope.camera.video.src="";
	}
	
	
	return $scope;
}]);

/*
	0ct 2012

	Alfresco		// redirect
	BOX				// redirect
	+COMPUTER
	DROPBOX			// redirect
	EVERNOTE		// redirect
	FACEBOOK		// redirect
	FLICKR			// redirect
	+FTP				// !image/*
	GITHUB			// redirect
	GOOGLE_DRIVE	// redirect
	PICASA			// redirect
	+WEBDAV			// !image/*

	Pick only:
	GMAIL			// redirect
	+IMAGE_SEARCH
	INSTAGRAM		// redirect
	+URL
	VIDEO			// Adobe Flash
	WEBCAM			// Adobe Flash

	Export only:
	SEND_EMAIL

	QQQQ
	- connect directly to S3?

	*/
//})(angular);
(function (angular) {
angular.module('io.factory.message', [])
.factory('$message', ['$rootScope', '$http', '$routeParams', function($rootScope, $http, $routeParams) {
	console.log('MessageFactory ('+$rootScope.$id+')');
	
	var $scope = {};
	$scope.version = '0.1.0';
	$scope.unread = 0;
	
	$scope.init = function() {
		$scope.alerts = [];
	
		// modal params
		$scope.to_name = "";
		$scope.compose = {};
		
	};
	
	$scope.open = function(user_ID, to_name) {
		$scope.init();
		
		// reset compose
		$scope.compose = {
			user_ID:user_ID
		};
		$scope.to_name = to_name;
		
		$('#messageModal').modal('show');
	};
	
	$scope.close = function() {
		$('#messageModal').modal('hide');
	};
	
	$scope.updateUnreadCount = function() {
		console.log('updateUnreadCount()');
		$http.get($rootScope.settings.server+'/message/unread')
			.success(function(data) {
				console.log('updateUnreadCount.get.success');
				console.log(data);
				//$scope.dbing[id].name = data.name;
				
				$scope.unread = data;
			})
			.error(function() {
				console.log('updateUnreadCount.get.error');
				//$rootScope.http_error();
			});
	};
	
	$scope.send = function() {
		console.log('send()');
		
		$http.post($rootScope.settings.server+'/message', $scope.compose)
			.success(function(data) {
				console.log('send.get.success');
				console.log(data);
				//$scope.dbing[id].name = data.name;
				
				$scope.compose.message = '';
				$scope.alerts = [{'class':'success', 'label':'Message sent:', 'message':'Click to go to conversation.'}];
			})
			.error(function() {
				console.log('send.get.error');
				//$rootScope.http_error();
			});
	};
	
	
	$rootScope.$watch('session.user_ID', function(value) {
      	if (value) $scope.updateUnreadCount();
    });
	
	return $scope;
}]);

})(angular);

(function (angular) {
angular.module('io.factory.accessibility', [])
.factory('$accessibility', ['$rootScope', '$http', function($rootScope, $http) {
	console.log('AccessibilityFactory ('+$rootScope.$id+')');
	
	var $scope = {};
	$scope.version = '0.1.0';
	$scope.css_file = "css/accessibility.min.css";
	
	$scope.settings = db.get('accessibility', {
		'accessibility':false,
		//'dyslexic':false,
		'zoom':1
	});
	
	$scope.init = function() {
		console.log('$accessibility.init()');
		// accessibility
		if ($scope.settings.accessibility) {
			$scope.load();
		}
		
		// zoom
		//$scope.zoom($scope.settings.zoom);
	};
	
	$scope.save = function() {
		db.set('accessibility', $scope.settings);
		console.log($scope.settings);
	};
	
	$scope.toggle = function() {
		console.log('$accessibility.toggle()');
		if ($scope.settings.accessibility) {
			$scope.settings.accessibility = false;
		} else {
			$scope.settings.accessibility = true;
		}
		$scope.load();
	};
	
	$scope.load = function() {
		console.log('$accessibility.load()');
		if ($scope.settings.accessibility) {
			$rootScope.loadStyle($scope.css_file);
		} else {
			$rootScope.unloadStyle($scope.css_file);
		}
		$scope.save();
	};
	
	// settings zoom function
	$scope.zoom = function(zoom) {
		zoom || (zoom = 1);
		$scope.settings.zoom = zoom;
		
		//document.body.style.zoom = $scope.settings.zoom;
		//document.body.style.MozTransform = 'scale(' + ($scope.settings.zoom / 100) + ')';
		document.body.style['font-size'] = ($scope.settings.zoom * 100) +'%';
		
		$scope.save();
	};
	
	$rootScope.$watch($rootScope, function() {
		$scope.init();
	});
	
	return $scope; // important
}]);

})(angular);
//angular.module('io.controller.sign', [])
//.controller('SignCtrl', ['$scope', '$http', '$cookies', '$routeParams', function($scope, $http, $cookies, $routeParams) {
SignCtrl.$inject = ['$scope', '$http', '$cookies', '$routeParams'];
function SignCtrl($scope, $http, $cookies, $routeParams) {
	console.log('SignCtrl ('+$scope.$id+') '+$routeParams.action);
	
	$scope.errors = {};		// form errors
	$scope.action = $routeParams.action ? $routeParams.action : 'in';
	console.log($scope.action);
	
	//-- Sign Up --//
	$scope.signup = {
		//email:'',
		//password:'',
		//country_code: $scope.$locale.id.substr(3,2).toUpperCase(),
	};

	$scope.totp = {
		value:'',
		timer:60
	};
	
	$scope.account_signup = function() {
		console.log('account_signup()');
		$scope.signup.referral = $cookies.referral;

		$http.post($scope.settings.server+'/account/signup', $scope.signup)
			.success(function(data) {
				console.log('account_signup.post.success');
				console.log(data);
				$scope.errors = (data.errors) ? data.errors : {};
				$rootScope.alerts = (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					//$scope.signup = {};
					$scope.signin.email = $scope.signup.email;
					
					$scope.action = 'in';
					$rootScope.alerts = [{'class':'success', 'label':'Account created!', 'message':'Check your email for an activation link.'}];
				}
			})
			.error(function() {
				console.log('account_signup.post.error');
				$rootScope.http_error();
			});
	};
	//-- End Sign Up --//

	//-- Sign In --//
	$scope.signin = {
		//email:'',
		//password:'',
		remember:true
	};

	$scope.account_signin = function() {
		console.log('account_signin()');
		//redirect || (redirect = '#/');

		$http.post($scope.settings.server+'/account/signin',
			{
				email:		$scope.signin.email,
				password:	$scope.signin.password,
				remember:	$scope.signin.remember
				//ua:			navigator.userAgent.toLowerCase()
			})
			.success(function(data) {
				console.log('account_signin.post.success');
				console.log(data);

				$scope.errors = (data.errors) ? data.errors : {};
				$rootScope.alerts = (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					
					if (data.totp) {
						$scope.action = 'totp';
						$scope.user_ID = data.user_ID;
					} else if (data) {
						$rootScope.session = syncVar(data, $rootScope.session);
						//if ($rootScope.session != {})
						$rootScope.session.save = $scope.signin.remember;
						console.log($rootScope.session);
						$rootScope.saveSession();
						$scope.signin = {};	// clear form
	
						//$scope.signin_callbacks(); // runs all callbacks that were set by siblings
						// refresh page
						//$scope.refresh();
						var redirect = ($cookies.redirect ? $cookies.redirect : $rootScope.settings.dashboard);
						$cookies.redirect = null;
						$scope.href('#/'+redirect);
					} else {
						// catch any server side errors
						$rootScope.alerts = [{'class':'error', 'label':'Internal Error', 'message':'Please notify us about it.'}];
					}
					
				}
			})
			.error(function() {
				console.log('account_signin.post.success');
				$rootScope.http_error();
			});
	};
	//-- End Sign In --//
	
	$scope.account_totp = function(code) {
		console.log('account_totp('+code+')');
		//redirect || (redirect = '#/');

		$http.put($scope.settings.server+'/account/totp/'+code)
			.success(function(data) {
				console.log('account_totp.put.success');
				console.log(data);

				$scope.errors = (data.errors) ? data.errors : {};
				$rootScope.alerts = (data.alerts) ? data.alerts : [];
				if (data && !data.alerts && !data.errors) {
					
					$rootScope.session = syncVar(data, $rootScope.session);
					//if ($rootScope.session != {})
					$rootScope.session.save = $scope.signin.remember;
					console.log($rootScope.session);
					$rootScope.saveSession();
					$scope.signin = {};	// clear form

					//$scope.signin_callbacks(); // runs all callbacks that were set by siblings
					// refresh page
					//$scope.refresh();
					var redirect = ($cookies.redirect ? $cookies.redirect : $rootScope.settings.dashboard);
					$cookies.redirect = null;
					$scope.href('#/'+redirect);
				} else {
					$scope.errors.totp = "Verification Failed";
				}
			})
			.error(function() {
				console.log('account_totp.put.success');
				$rootScope.http_error();
			});
	};
	
	//-- Sign Out --//
	$scope.account_signout = function() {
		console.log('account_signout()');
		db.clear(); // clear localstorage
		if (objectLength($rootScope.session)) {	// prevent multiple calls
			$rootScope.resetSession();
			$http.get($scope.settings.server+'/account/signout')
				.success(function(data) {
					console.log('account_signout.get.success');
					console.log(data);
					$rootScope.alerts = [{'class':'info', 'label':'Signed Out'}];
					$scope.action = 'in';
					//$rootScope.href('#/sign/in');
					console.log(objectLength($rootScope.session));
				})
				.error(function() {
					console.log('account_signout.get.error');
					$rootScope.http_error();
				});
		}
	};
	//-- End Sign Out --//
	
	if ($routeParams.confirm_hash) {
		$scope.action = 'in';
	}
	if ($scope.action == 'out') {
		$scope.account_signout();
		$scope.action = 'in';
	} else if ($rootScope.session.user_ID) {
		// redirect if already signed in
		$scope.href('#/'+$rootScope.settings.dashboard);
	}
	

}
//}]);
//angular.module('io.controller.page', [])
//.controller('PageCtrl', ['$scope', '$http', '$routeParams', function($scope, $http, $routeParams) {
PageCtrl.$inject = ['$scope', '$http', '$routeParams'];
function PageCtrl($scope, $http, $routeParams) {
 	console.log('PageCtrl ('+$scope.$id+', '+$routeParams.page+')');
 	$scope.page_url = 'view/page/'+encodeURIComponent($routeParams.page)+'.html';
 	//$scope.nav_select($scope.nav_parent_id, $scope.nav_ids, 'legal');
}
//}]);
//angular.module('io.controller.page', [])
//.controller('PageCtrl', ['$scope', '$http', '$routeParams', function($scope, $http, $routeParams) {
SettingsCtrl.$inject = ['$scope', '$http', '$routeParams'];
function SettingsCtrl($scope, $http, $routeParams) {
 	console.log('SettingsCtrl '+$routeParams.page);
 	$scope.page_url = 'view/settings/'+encodeURIComponent($routeParams.page)+'.html';
 	//$scope.nav_select($scope.nav_parent_id, $scope.nav_ids, 'legal');
 	
 	// notifications
 	// defaults as per class.notify.php
 	// email:true
 	// sms:false
 	$scope.notify = $rootScope.settings.notify;
 	
 	$scope.loadNotifications = function() {
 		$http.get($scope.settings.server+'/user/notify')
 			.success(function(data) {
	 			console.log(data);
	 			if (data != "") {
	 				$scope.notify = data;
	 			}
 			})
 			.error(function(){
	 			
 			});
 	};
 	
 	$scope.updateNotifications = function() {
 		console.log($scope.notify);
 		$http.put($scope.settings.server+'/user/notify', $scope.notify)
 			.success(function(data) {
	 			$rootScope.alerts = [{"class":"success", "label":"Notifications:", "message":"Saved"}]
 			})
 			.error(function(){
	 			
 			});
 	};
 	
 	$scope.loadNotifications();
 	$scope.require_signin();
}
//}]);
//angular.module('io.controller.page', [])
//.controller('PageCtrl', ['$scope', '$http', '$routeParams', function($scope, $http, $routeParams) {
SupportCtrl.$inject = ['$scope', '$http', '$routeParams'];
function SupportCtrl($scope, $http, $routeParams) {
 	console.log('SupportCtrl '+$routeParams.page);
 	$scope.page_url = 'view/support/'+encodeURIComponent($routeParams.page)+'.html';
 	//$scope.nav_select($scope.nav_parent_id, $scope.nav_ids, 'legal');
}
//}]);
//angular.module('io.controller.onboard', [])
//.controller('OnboardCtrl', ['$scope', '$http', '$routeParams', function($scope, $http, $routeParams) {
OnboardCtrl.$inject = ['$scope', '$cookies', '$http', '$routeParams'];
function OnboardCtrl($scope, $cookies, $http, $routeParams) {
	console.log('OnboardCtrl ('+$scope.$id+') page:'+$routeParams.page);
	$scope.errors = {};

	if (!$routeParams.page || $routeParams.page == 'start') $scope.href('#/onboard/'+$rootScope.settings.onboard.start);
	$scope.page_url = 'view/onboard/'+encodeURIComponent($routeParams.page)+'.html';

	$scope.BuildProgressTracker = function(page, action) {
		console.log('BuildProgressTracker('+page+', '+action+')');
		var elements = dom$('#progress_tracker').getElementsByTagName("a");
		var uri = $scope.uri();

		var after = false;	// apple after class
		for (var i = 0, l = elements.length; i < l; i++ ) {
			elements[ i ].className = '';
			elements[ i ].firstChild.innerHTML = i;	// badge value

		    if (elements[ i ].href.indexOf('#/onboard/'+page) !== -1) {	// current page
		    	if (action === 'skip') {	// go to next page
			    	if (i+1 < l) $scope.href(elements[ i+1 ].href);
			    	else {	// onboard complete - update user_level if not done after subscribe
			    		$rootScope.session.timestamp_create = 1;
			    		$http.get($rootScope.settings.server+'/account/onboard_done')
			    			.success(function(data) {
			    				console.log('BuildProgressTracker.get.success');
			    				console.log(data);
			    				$rootScope.updateSession(function(){
			    					var redirect = ($cookies.redirect ? $cookies.redirect : $rootScope.settings.dashboard);
			    					$cookies.redirect = null;
			    					$scope.href('#/'+redirect);
			    				});
			    			})
							.error(function() {
								console.log('BuildProgressTracker.get.error');
								$rootScope.http_error();
							});
			    	}
		    	}
			    elements[ i ].className = 'current';
			    after = true;
		    } else if (after) {
		    	elements[ i ].href = null;
		    	elements[ i ].className = 'after';
		    }
		}
	}


	//-- Buttons --//
	$scope.button = {};
	$scope.button.skip = function() { $scope.href($scope.uri()+'/skip'); };
	//-- End Buttons --//

	$scope.require_signin(function() {
		$scope.BuildProgressTracker($routeParams.page, $routeParams.action);
	});
}
//}]);

//angular.module('io.controller.confirm', [])
//.controller('ConfirmCtrl', ['$scope', '$http', '$routeParams', function($scope, $http, $routeParams) {
ConfirmCtrl.$inject = ['$scope', '$http', '$routeParams'];
function ConfirmCtrl($scope, $http, $routeParams) {
	console.log('ConfirmCtrl ('+$scope.$id+')');
	console.log($routeParams);
	$scope.errors = {};
	$scope.hash = ($routeParams && $routeParams.confirm_hash) ? $routeParams.confirm_hash : '';
	$scope.status = false; // used on confirm page
	
	$scope.check = function(hash) {
		$scope.errors = {};
		
		hash || (hash = $scope.hash);
		$http.get($scope.settings.server+'/account/confirm_email/'+encodeURIComponent(hash))
			.success(function(data) {
				console.log(data);
				if (data.alerts) $rootScope.alerts = data.alerts;
				if (data.errors) $scope.errors = data.errors;
				if (!data.alerts && !data.errors) {
					$rootScope.session.email_confirm = true;
					console.log($rootScope.session);
					$rootScope.saveSession();
					$rootScope.alerts = [{'class':'success', 'label':'Email Confirmation:', 'message':'Confirmed'}];
				}
			});
	};
	
	$scope.resend = function() {
		$scope.errors = {};
		$http.get($scope.settings.server+'/account/resend_confirm_email/')
			.success(function(data) {
				console.log(data);
				if (data.alerts) $rootScope.alerts = data.alerts;
				if (data.errors) $scope.errors = data.errors;
				if (!data.alerts && !data.errors) {
					$rootScope.alerts = [{'class':'info', 'label':'Email Confirmation:', 'message':'Sent'}];
				}
			});
	};
	
	if ($scope.hash) $scope.check();
}
//}]);

//angular.module('io.controller.reset', [])
//.controller('ResetCtrl', ['$scope', '$http', '$routeParams', function($scope, $http, $routeParams) {
ResetCtrl.$inject = ['$scope', '$http', '$routeParams'];
function ResetCtrl($scope, $http, $routeParams) {
	console.log('ResetCtrl ('+$scope.$id+')');
	
	$scope.errors = {};
	$scope.hash = $routeParams.reset_hash;
	$scope.state = {
		verify:true,
		reset:true,
		signin:false
	};

	$scope.auth = {};	// verify form
	$scope.password = {
		hash:$scope.hash,
		password:''
	}; // reset form

	$scope.check = function() {
		$http.get($scope.settings.server+'/account/reset_check/'+encodeURIComponent($scope.hash))
			.success(function(data) {
				console.log(data);
				$scope.errors = (data.errors) ? data.errors : {};
				$rootScope.alerts = (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					if (data) {
						$scope.state.verify = true;
						$scope.auth = data;
					} else {
						$scope.state.reset = true;
					}

					$('#passwordModal').modal('show');
				}
			})
			.error(function() {
				$rootScope.http_error();
			});
	};


	$scope.verify = function() {
		$http.put($scope.settings.server+'/account/reset_verify/', {hash:$scope.hash, id:$scope.ID})
			.success(function(data) {
				console.log(data);
				$scope.errors = (data.errors) ? data.errors : {};
				$rootScope.alerts = (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					$scope.state.verify = false;
					$scope.state.reset = true;
					$scope.auth = {};
					//$('#passwordModal').modal('show');
				}
			})
			.error(function() {
				$rootScope.http_error();
			});
	};

	$scope.reset = function() {
		$http.put($scope.settings.server+'/account/reset_password/', $scope.password)
			.success(function(data) {
				console.log(data);
				$scope.errors = (data.errors) ? data.errors : {};
				$rootScope.alerts = (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					$scope.state.reset = false;
					$scope.state.signin = true;
					$scope.password.new_password = '';

					//window.location.href="app#/";
					$rootScope.alerts = [{'class':'success','label':'Password Saved'}];
				}
			})
			.error(function() {
				$rootScope.http_error();
			});
	};

	$scope.check();
}
//}]);
SecurityCtrl.$inject = ['$scope', '$http'];
function SecurityCtrl($scope, $http) {
	console.log('SecurityCtrl ('+$scope.$id+')');
	
	$scope.services = [
		{
			"id"		:"google",
			"name"		:"Google Authenticator",
			"website"	:"https://support.google.com/accounts/bin/answer.py?hl=en&answer=1066447",
			"ios"		:"https://itunes.apple.com/us/app/google-authenticator/id388497605",
			"android"	:"https://m.google.com/authenticator",
			"bb"		:"https://m.google.com/authenticator"
		}
	];
	
	$scope.security = {}
	$scope.security.totp = $rootScope.settings.security.totp;
 	
 	$scope.loadSecurity = function() {
 		console.log('loadSecurity()');
 		$http.get($scope.settings.server+'/user/security')
 			.success(function(data) {
 				console.log(data);
 				if (data != "") {
	 				$scope.security = data;
 				}
 				console.log($scope.security);
 			})
 			.error(function(){
	 			
 			});
 	};
 	
 	$scope.updateSecurity = function() {
 		console.log('updateSecurity()');
 		console.log($scope.security);
 		$http.put($scope.settings.server+'/user/security', $scope.security)
 			.success(function(data) {
	 			$rootScope.alerts = [{"class":"success", "label":"Security:", "message":"Saved"}]
 			})
 			.error(function(){
	 			
 			});
 	};
 	
	$scope.loadTOTPService = function() {
		console.log('loadTOTPService()');
		$http.get($rootScope.settings.server+"/totp/"+$scope.security.totp.service)
			.success(function(data) {
				console.log(data);
				if (data) {
					$scope.security.totp.secret = JSON.parse(data);
				}
			})
			.error(function(){
				
			});
	};
	
	$scope.checkTOTP = function($code) {
		console.log('checkTOTP('+$code+')');
		$scope.test_code_check = true;
		$http.put($rootScope.settings.server+"/totp/"+$scope.security.totp.secret+"/"+$code)
			.success(function(data) {
				console.log(data);
				$scope.test_code_return = data;
			})
			.error(function(){
				
			});
	};
	
	$scope.testPGP = function(email) {
		console.log('testPGP()');
		
		$http.put($rootScope.settings.server+"/user/pgp/", email)
			.success(function(data) {
				console.log(data);
			})
			.error(function(){
				
			});
	};
	
	$scope.loadSecurity();
	$scope.require_signin();
}
//angular.module('io.controller.user', [])
//.controller('UserCtrl',
//['$scope', '$http', '$routeParams',
//function($scope, $http, $routeParams) {
UserCtrl.$inject = ['$scope', '$http', '$routeParams'];
function UserCtrl($scope, $http, $routeParams) {
	console.log('UserCtrl ('+$scope.$id+')');
	
	$scope.errors = {
		user:{},
		email:{}
	};

	// forms
	//$scope.forms
	$scope.user = {};
	$scope.email = {};
	$scope.password = {};

	$scope.loadUser = function(profile_ID) {
		console.log('loadUser('+profile_ID+')');
		profile_ID || (profile_ID = 0);
		
		$http.get($scope.settings.server+'/user/'+profile_ID)
			.success(function(data) {
				console.log('loadUser.get.success');
				console.log(data);
				$scope.errors.user	= (data.errors) ? data.errors : {};
				$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					$scope.user = data;
				}
			})
			.error(function() {
				console.log('loadUser.get.error');
				$rootScope.http_error();
			});
	};
	$scope.loadUserName = function(profile_name) {
		console.log('loadUserName('+profile_name+')');
		profile_name || (profile_name = '');
		
		$http.get($scope.settings.server+'/user/name/'+profile_name)
			.success(function(data) {
				console.log('loadUser.get.success');
				console.log(data);
				$scope.errors.user	= (data.errors) ? data.errors : {};
				$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					$scope.user = data;
				}
			})
			.error(function() {
				console.log('loadUser.get.error');
				$rootScope.http_error();
			});
	};

	$scope.updateUser = function() {
		console.log('updateUser()');
		if ($scope.user.user_ID) {	// update
			$http.put($scope.settings.server+'/user/', $scope.user)
				.success(function(data) {
					console.log('updateUser.put.success');
					console.log(data);
					$scope.errors.user	= (data.errors) ? data.errors : {};
					$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
					if (!data.alerts && !data.errors) {
						$rootScope.updateSession();
						console.log($rootScope.session);
						$rootScope.alerts = [{'class':'success', 'label':'User Information:', 'message':'Saved'}];
					}
				})
				.error(function() {
					console.log('updateUser.put.error');
					$rootScope.http_error();
				});
		} else {	// create
			/*
			//$scope.user.user_ID = data;
			*/
		}

	};
	$scope.deleteUser = function() {
		if (confirm('Are you sure you want to delete your account?')) {
			$http.get($scope.settings.server+'/user/delete')
				.success(function(){
					$scope.href('#/sign/out');
				})
				.error(function() {
					$rootScope.http_error();
				});
		}
	};

	$scope.check = {};
	$scope.check.user_name = function(user_name) {
		console.log('check.user_name('+user_name+')');
		
		if (user_name) {	// update
			//$scope.user.user_name = user_name.replace(/[^a-z0-9_]/, "");
			$http.get($scope.settings.server+'/account/unique/'+encodeURIComponent(user_name))
				.success(function(data) {
					console.log(data);
					$scope.errors.user 	= (data.errors) ? data.errors : {};
					$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
					if (!data.alerts && !data.errors) {

					}
				})
				.error(function() {
					$rootScope.http_error();
				});
		} else {
			/*
			add in positive indicator
			*/
		}

	};

	$scope.updateEmail = function() {
		$http.put($scope.settings.server+'/account/email_change/', $scope.email)
			.success(function(data) {
				console.log(data);
				$scope.errors.email		= (data.errors) ? data.errors : {};
				$rootScope.alerts 		= (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					$scope.email = {};
					$rootScope.updateSession();
					$rootScope.alerts = [{'class':'success', 'label':'Change Email:', 'message':'Saved'}];
				}
			})
			.error(function() {
				$rootScope.http_error();
			});
	};

	$scope.compileMarkdown = function(text) {
		if (!text) return text;
		//var converter = new Markdown.Converter();
		var converter = new Markdown.getSanitizingConverter();
		return converter.makeHtml(text);
	};


	$scope.require_signin(function(){
		console.log('UserCtrl require_signin');
		//$scope.user = $rootScope.session.user ? $rootScope.session.user : {};
		if ($routeParams.profile_name) {
			$scope.loadUserName($routeParams.profile_name);
		} else if ($routeParams.profile_ID) {
			$routeParams.profile_ID || ($routeParams.profile_ID = 0);
			$scope.user = {
				'user_ID':$routeParams.profile_ID
			};
			$scope.loadUser($routeParams.profile_ID);
		} else {
			$scope.user = $rootScope.session.user ? objectClone($rootScope.session.user) : {
				user_ID:$rootScope.session.user_ID
			};
		}
		console.log($scope.user);
	});
}
//}]);
//angular.module('io.controller.password', [])
//.controller('PasswordCtrl', ['$scope', '$http', function($scope, $http) {
PasswordCtrl.$inject = ['$scope', '$http'];
function PasswordCtrl($scope, $http) {
	console.log('PasswordCtrl ('+$scope.$id+')');
	
	$scope.errors = {};
	
	$scope.updatePassword = function() {
		$http.put($scope.settings.server+'/account/password_change/', $scope.password)
			.success(function(data) {
				console.log('updatePassword.put.success');
				console.log(data);
				$scope.errors			= (data.errors) ? data.errors : {};
				$rootScope.alerts 		= (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					$scope.password = {};
					$rootScope.alerts = [{'class':'success', 'label':'Change Password:', 'message':'Saved'}];
				}
			})
			.error(function() {
				console.log('updatePassword.put.error');
				$rootScope.http_error();
			});
	};
	
	$scope.resetPassword = function(email) {
		console.log('reset_password()');
		$http.get($scope.settings.server+'/account/reset_send/'+encodeURIComponent(email))
			.success(function(data) {
				console.log('resetPassword.get.success');
				console.log(data);
				$scope.errors = (data.errors) ? data.errors : {};
				$rootScope.alerts = (data.alerts) ? data.alerts : [];
				$rootScope.alerts = [{'class':'info', 'message':'We have sent an email to '+email+' with further instructions.'}]; // replace in {{signin.email}}
			})
			.error(function() {
				console.log('resetPassword.get.error');
				$rootScope.http_error();
			});
	};
}
//}]);
//angular.module('io.controller.company', [])
//.controller('CompanyCtrl', ['$scope', '$http', function($scope, $http) {
CompanyCtrl.$inject = ['$scope', '$http', '$routeParams'];
function CompanyCtrl($scope, $http, $routeParams) {
	console.log('CompanyCtrl ('+$scope.$id+')');

	$scope.errors = {};
	$scope.toggle = {};
	$scope.company = {};
	
	$scope.user = {};
	$scope.users = {};
	$scope.location = {
		"country_code":$rootScope.country_code,
	};
	$scope.locations = {};
	
	//-- Company --//
	$scope.loadCompany = function(profile_ID) {
		console.log('loadCompany('+profile_ID+')');
		profile_ID || (profile_ID = 0);
		
		$http.get($scope.settings.server+'/company/'+profile_ID)
			.success(function(data) {
				console.log(data);
				$scope.errors.user	= (data.errors) ? data.errors : {};
				$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					$scope.company = data;
					$scope.location = data.location_default_ID ? data.location : $scope.location;
					$scope.location.primary = true;
					//$scope.loadLocations();
					/*if ($scope.session.company_ID == data.company_ID) {
						$scope.loadUsers();
						$scope.loadLocations();
					}*/
				}
			})
			.error(function() {
				$rootScope.http_error();
			});

	};
	$scope.loadCompanyName = function(profile_name) {
		console.log('loadCompanyName('+profile_name+')');
		profile_name || (profile_name = '');
		
		$http.get($scope.settings.server+'/company/name/'+profile_name)
			.success(function(data) {
				console.log('loadCompanyName.get.success');
				console.log(data);
				$scope.errors.user	= (data.errors) ? data.errors : {};
				$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					$scope.company = data;
					$scope.location = data.location_default_ID ? data.location : $scope.location;
					$scope.location.primary = true;
					
					/*if ($scope.session.company_ID == data.company_ID) {
						$scope.loadUsers();
						$scope.loadLocations();
					}*/
				}
			})
			.error(function() {
				console.log('loadCompanyName.get.error');
				$rootScope.http_error();
			});
	};

	$scope.updateCompany = function() {
		$rootScope.alerts = [];
		
		if ($scope.company.company_ID) {	// update
			$http.put($scope.settings.server+'/company/', $scope.company)
				.success(function(data) {
					console.log(data);
					$scope.errors 		= (data.errors) ? data.errors : {};
					$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
					if (!data.alerts && !data.errors) {
						$rootScope.session.company = $scope.company;
						$rootScope.saveSession();
						//$rootScope.updateSession();
						$rootScope.alerts = [{'class':'success', 'label':'Company Profile:', 'message':'Saved'}];
					}
				})
				.error(function() {
					$rootScope.http_error();
				});
		} else {	// create
			$http.post($scope.settings.server+'/company/', $scope.company)
				.success(function(data) {
					console.log(data);
					$scope.errors 		= (data.errors) ? data.errors : {};
					$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
					if (!data.alerts && !data.errors) {
						$scope.company.company_ID = data;
						$rootScope.session.company_ID = data;
						$rootScope.session.company = $scope.company;
						$rootScope.saveSession();
						//$rootScope.updateSession();
						$rootScope.alerts = [{'class':'success', 'label':'Company Profile:', 'message':'Saved'}];
					}
				})
				.error(function() {
					$rootScope.http_error();
				});
		}
	};
	
	//-- Locations --//
	$scope.loadLocations = function() {
		console.log('loadLocations');
		$http.get($scope.settings.server+'/location/')
			.success(function(data) {
				console.log(data);
				$scope.errors.user	= (data.errors) ? data.errors : {};
				$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					$scope.locations = data;
					
					// load region data
					var regions = [];
					for (var i in data) {
						regions.push(data[i].country_code);
					}
					regions = arrayUnique(regions);
					
					for (var i in regions) {
						$rootScope.loadRegions(regions[i]);
					}
					
					
				}
			})
			.error(function() {
				$rootScope.http_error();
			});
	};
	
	$scope.editLocation = function(location) {
		console.log('editLocation(location)');
		console.log(location);
		if (!location) {
			location = {
				'primary':($scope.locations == {}),
				'country_code':$rootScope.country_code.toUpperCase()
			}
		}
		
		$scope.location = location;
	};
	
	$scope.updateLocation = function() {
		console.log('updateLocation');
		$rootScope.alerts = [];
		
		if ($scope.location.location_ID) {	// update
			$http.put($scope.settings.server+'/location/', $scope.location)
				.success(function(data) {
					console.log('updateLocation.put.success');
					console.log(data);
					$scope.errors 		= (data.errors) ? data.errors : {};
					$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
					if (!data.alerts && !data.errors) {
						$scope.locations[$scope.location.location_ID] = $scope.location;
						$rootScope.alerts = [{'class':'success', 'label':'Location:', 'message':'Saved'}];
					}
				})
				.error(function() {
					console.log('updateLocation.put.error');
					$rootScope.http_error();
				});
		} else {	// create
			$http.post($scope.settings.server+'/location/', $scope.location)
				.success(function(data) {
					console.log('updateLocation.post.success');
					console.log(data);
					$scope.errors 		= (data.errors) ? data.errors : {};
					$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
					if (!data.alerts && !data.errors) {
						$scope.location.location_ID = data;
						$scope.locations[$scope.location.location_ID] = $scope.location;
						$rootScope.alerts = [{'class':'success', 'label':'Location:', 'message':'Saved'}];
					}
				})
				.error(function() {
					console.log('updateLocation.post.error');
					$rootScope.http_error();
				});
		}
	};
	
	$scope.deleteLocation = function(id) {
		console.log('deleteLocation('+id+')');
		$http.delete($scope.settings.server+'/location/'+id)
			.success(function(data) {
				console.log('deleteLocation.delete.success');
				console.log(data);
				$scope.errors.user	= (data.errors) ? data.errors : {};
				$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
				if (!data.alerts && !data.errors) {
					delete $scope.locations[id];
				}
			})
			.error(function() {
				console.log('deleteLocation.delete.error');
				$rootScope.http_error();
			});
	};
	
	//-- Users --//
	$scope.loadUsers = function() {

		$http.get($scope.settings.server+'/company/user/').success(function(data) {
			console.log(data);
			$scope.errors.user	= (data.errors) ? data.errors : {};
			$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
			if (!data.alerts && !data.errors) {
				$scope.users = data;
			}
		})
		.error(function() {
			$rootScope.http_error();
		});
	};
	
	$scope.editUser = function(user) {
		console.log('editUser(user)');
		console.log(user);
		if (!user) {
			user = {
				'user_level':0	
			};
		}
		
		user.user_level = user.user_level.toString(); // for select option
		$scope.user = user;
	};
	
	$scope.updateUser = function() {
		console.log('updateLocation');
		$rootScope.alerts = [];
		
		if ($scope.user.user_ID) {	// update
			$http.put($scope.settings.server+'/company/user/', $scope.user)
				.success(function(data) {
					console.log('updateUser.put.success');
					console.log(data);
					$scope.errors 		= (data.errors) ? data.errors : {};
					$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
					if (!data.alerts && !data.errors) {
						$scope.users[$scope.user.user_ID] = $scope.user;
						$rootScope.alerts = [{'class':'success', 'label':'User:', 'message':'Saved'}];
					}
				})
				.error(function() {
					console.log('updateUser.put.error');
					$rootScope.http_error();
				});
		} else {	// create
			$http.post($scope.settings.server+'/company/user/', $scope.user)
				.success(function(data) {
					console.log('updateUser.post.success');
					console.log(data);
					$scope.errors 		= (data.errors) ? data.errors : {};
					$rootScope.alerts 	= (data.alerts) ? data.alerts : [];
					if (!data.alerts && !data.errors) {
						$scope.user.user_ID = data;
						$scope.users[$scope.user.user_ID] = $scope.user;
						$rootScope.alerts = [{'class':'success', 'label':'User:', 'message':'Saved'}];
					}
				})
				.error(function() {
					console.log('updateUser.post.error');
					$rootScope.http_error();
				});
		}
	};
	
	//-- About Details --//
	$scope.compileMarkdown = function(text) {
		if (!text) return text;
		//var converter = new Markdown.Converter();
		var converter = new Markdown.getSanitizingConverter();
		return converter.makeHtml(text);
	};

	$scope.require_signin(function(){
		console.log('CompanyCtrl require_signin');
		console.log($rootScope.session.company);
		
		if ($routeParams.profile_name) {
			$scope.loadCompanyName($routeParams.profile_name);
		} else if ($routeParams.profile_ID) {
			$routeParams.profile_ID || ($routeParams.profile_ID = 0);
			$scope.company.company_ID = $routeParams.profile_ID;
			$scope.loadCompany($routeParams.profile_ID);
		} else {
			$scope.company = $rootScope.session.company ? $rootScope.session.company : {
				company_ID:$rootScope.session.company_ID,
				country_code:$rootScope.country_code.toUpperCase()
			};
		}
		
		// load on settings page
		if ($routeParams.page) {
			$scope.loadUsers();
			$scope.loadLocations();
		}
	});
}
//}]);
angular.module('io.controller.filepicker', ['io.factory.filepicker'])
.controller('FilepickerCtrl', ['$scope', '$http', '$filepicker', function($scope, $http, filepicker) {
//FilepickerCtrl.$inject = ['$scope', '$http', '$filepicker'];
//function FilepickerCtrl($scope, $http, filepicker) {
	console.log('FilepickerCtrl ('+$scope.$id+')');
	//$scope.errors = {};
	
	$scope.filepicker = filepicker;
	
	//-- dropzone --//
	var dropbox = document.getElementById("dropbox");

    // init event handlers
    function dragEnterLeave(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        $scope.$apply(function(){
            $scope.filepicker.setDropzoneName(true);
            $scope.dropClass = '';
        });
    }
    dropbox.addEventListener("dragenter", dragEnterLeave, false);
    dropbox.addEventListener("dragleave", dragEnterLeave, false);
    dropbox.addEventListener("dragover", function(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        
        //console.log(objectClone(evt.dataTransfer));
        
        var ok = evt.dataTransfer && evt.dataTransfer.types && (
    				evt.dataTransfer.types.indexOf('Files') >= 0				// file from computer
    				|| evt.dataTransfer.types.indexOf('text/uri-list') >= 0		// url from other window
    			);
        	
        $scope.$apply(function(){
        	$scope.filepicker.setDropzoneName(ok);
            $scope.dropClass = ok ? 'alert-success' : 'alert-error';
        })
    }, false);
    dropbox.addEventListener("drop", function(evt) {
        //console.log('drop evt:', JSON.parse(JSON.stringify(evt.dataTransfer)));
        //console.log(evt.dataTransfer.getData('TEXT'));
        //console.log(evt.dataTransfer.getData('URL'));
        
        evt.stopPropagation();
        evt.preventDefault();
        $scope.$apply(function(){
            $scope.filepicker.setDropzoneName(true);
            $scope.dropClass = '';
        });
        
        if (evt.dataTransfer.getData('URL')) {
	        // pass to URL upload service
	        $scope.url.load(evt.dataTransfer.getData('URL'));
        } else {
        	$scope.setFiles(evt.dataTransfer.files);
        }
    }, false);
	
	
	
	
	//-- COMPUTER --//
	$scope.computer = {};
	
	// click button
	$scope.computer.buttonClick = function() {
		if ($scope.filepicker.args.multi) 	document.getElementById('file_multi_upload').click();
		else 								document.getElementById('file_upload').click();
	};
	
	// select file after button click
	$scope.computer.buttonSelect = function(element) {
    	console.log('computer.buttonSelect(element)');
      	console.log(element);
      	
        $scope.setFiles(element.files);
	        
    };

	
    
    
	//-- URL --//
	$scope.url = {};
	$scope.url.value = '';
    $scope.url.load = function(url) {
	    url = encodeURIComponent(url);
	    if ($scope.filepicker.args.resizecrop) {
	    	$scope.setFiles([
	    		{
		    		name: url,
		    		type: 'image/'+url.substr(url.lastIndexOf('.'))
	    		}
	    	]);
	    } else {
		    //$scope.settings.server+'/filepicker/url/'+url.replace(/\./g, '%2E');
		    $http.post($scope.settings.server+'/filepicker/url/'+$scope.filepicker.args.action+'/'+$scope.filepicker.args.ID, {url:url})
		    	.success(function(data){
		    		console.log('url.load.post.success');
		    		console.log(data);
		    		data = {target:{responseText:data}};
			    	uploadComplete(JSON.stringify(data));
		    	})
		    	.error(function(){
			    	console.log('url.load.post.error');
			    	uploadFailed();
		    	});
	    }
    };
	
    //-- RESIZECROP --//
	$scope.resizecrop = {
		img:{}
	};
	
	$scope.resizecrop.initParams = function(src, type) {
		var img = {};
		img.src = src; // URL
		img.type = type;
		img.zoom = 100;
		img.canvas; // source canvas
		img.data = ''; // DataURL
		
		$scope.resizecrop.img = img; // gen img
	}
	
	$scope.resizecrop.loadFile = function() {
	    for (var i in $scope.files) {
        	if ($scope.files[i].type.match(/image.*/)) {
        		
	        	//fd.append("file", $scope.resizeImg($scope.files[i]), $scope.files[i].name);
	        	//fd.append("file", $scope.files[i]);
	        	console.log($scope.files[i]);
	        	var file = $scope.files[i];
	        	var reader = new FileReader();  

		        reader.onload = function(evt) {
		            console.log('loadFile.reader.onload');
		            $scope.resizecrop.initParams(evt.target.result, file.type)
		            $scope.$apply(function(){
		            	$scope.resizecrop.generate();
		            	if ($scope.filepicker.args.multi == false) {
			            	$scope.filepicker.args.service = 'RESIZECROP';
		            	}
		            });
		        };
		        reader.readAsDataURL(file);
		        
        	}
        }

    };
    
    $scope.resizecrop.loadURL = function(src, type) {
    	var src = $scope.files[0].name,//.replace(/\./g, '%2E'),
    		proxy = $scope.settings.server+'/filepicker/url/?url='+src,
    		type = $scope.files[0].type;
    	
        $http.get(proxy+"&callback=JSON_CALLBACK")
			.success(function(data){
				//console.log(data);
				console.log('loadURL.get.success');
				$scope.resizecrop.initParams(proxy, type);
				//$scope.$apply(function(){
	            	$scope.resizecrop.generate();
	            	if ($scope.filepicker.args.multi == false) {
		            	$scope.filepicker.args.service = 'RESIZECROP';
	            	}
	            //});
			})
			.error(function(){
				$scope.filepicker.alerts = [{
	        		"class":"error",
	        		"label":"Failed",
	        		"message":"There was an error attempting to obtain the image."
	        	}];
			});

    };
	
	$scope.resizecrop.generate = function() {
		
		var image = new Image();
        image.onload = function(evt) {
            console.log('image.onload');
            	// image origenal size
            var	this_width = this.width,
            	this_height = this.height,
            	
		        // thumbnail size to upload
            	dest_width = $scope.filepicker.args.width,
                dest_height = $scope.filepicker.args.height,
                
            	// canvas size
	            canvas_width = dest_width*1.5,
		        canvas_height = dest_height*1.5,
                
	            // canvas crop offsets
	            crop_left = ((canvas_width - dest_width) / 2),
	            crop_top = ((canvas_height - dest_height) / 2),
		        
		        // image scale ratios
                width  = this_width,
                height = this_height,
                
                // image scale ratios
                width_ratio  = dest_width  / this_width,
                height_ratio = dest_height / this_height,
                
                x = (canvas_width/2),
                y = (canvas_height/2);
            
            
            function scaleImage() {
            	width = Math.round(this_width * ((width_ratio > height_ratio) ? width_ratio: height_ratio)) * $scope.resizecrop.img.zoom / 100;
            	height = Math.round(this_height * ((width_ratio > height_ratio) ? width_ratio: height_ratio)) * $scope.resizecrop.img.zoom / 100;
	            
	            //console.log(width+' x '+height+' ('+x+','+y+')>('+(x-width/2)+','+(y-height/2)+') @ '+zoom+'% zoom');
	            
	            // check image is still positioned right
	            
			 	//console.log(crop_left+' < '+(x - width/2)+' < '+(crop_left + dest_width)+' -> x = '+(x));
			 	//console.log(crop_top+' < '+(y - height/2)+' < '+(crop_top + dest_height)+' -> y = '+(y));
	            var left = (crop_left < (x - width/2)),
			 		right = ((x + width/2) < (crop_left + dest_width)),
			 		top = (crop_top < (y - height/2)),
			 		bottom = ((y + height/2) < (crop_top + dest_height));
			 	if(left) {console.log('l');
				  	x = crop_left + width/2;
			  	} else if (right) {console.log('r');
				  	x = crop_left + dest_width - width/2;
			  	}
			  	if (top){console.log('t');
			  		y = crop_top + height/2;
			  	} else if (bottom) {console.log('b');
			  		y = crop_top + dest_height - height/2;
			  	}
	            
	            
	            // scaled image canvas
	            var canvas = document.createElement("canvas");
	            canvas.width = width;
	            canvas.height = height;
	            canvas.getContext("2d").drawImage(image, 0, 0, width, height);
	            $scope.resizecrop.img.canvas = canvas;
            }
            
            
            function draw() {
	            
	            
				canvas.width = canvas_width;
		        canvas.height = canvas_height;
		        //canvas.style.cursor = 'move'; // see css rules
		        //canvas.onselectstart = function(){ return false; }; // browser bug work around - http://stackoverflow.com/questions/2745028/chrome-sets-cursor-to-text-while-dragging-why
		        var ctx = canvas.getContext("2d");
		        
		        //ctx.clearRect(0, 0, canvas_width, canvas_height);
	            //ctx.drawImage(copy, image_left, image_top)
	            ctx.drawImage($scope.resizecrop.img.canvas, (x-width/2), (y-height/2))
	            // draw faded overlay
	            ctx.save();
	            ctx.globalAlpha = 0.5;
	            // left
	            ctx.beginPath();
			    ctx.rect(0, 0, crop_left, canvas_height);
			    ctx.rect(crop_left, 0, dest_width, crop_top);
			    ctx.rect(crop_left+dest_width, 0, crop_left, canvas_height);
			    ctx.rect(crop_left, crop_top+dest_height, dest_width, crop_top);
			    ctx.fillStyle = 'white';
			    ctx.fill();
			    
			    ctx.beginPath();
			    ctx.rect(crop_left, crop_top, dest_width, dest_height);
			    ctx.lineWidth = 1;
			    ctx.strokeStyle = 'grey';
			    ctx.stroke();
			    
			    document.getElementById("resizecrop").innerHTML = '';
			    document.getElementById('resizecrop').appendChild(canvas);
			    
			    build();
            }
            
            function build() {
            	
	            // image offsets
	            /*console.log(
	            	'left: ('+(x-width/2)+')-('+(crop_left)+')'+' = '+
	            	((x-width/2)-(crop_left))+' = '+
	            	(((width - dest_width) / 2)-(x-canvas_width/2))+', '+
	            	'top: ('+(y-height/2)+')-('+(crop_top)+')'+' = '+
	            	((y-height/2)-(crop_top))+' = '+
	            	(((height - dest_height) / 2)-(y-canvas_height/2))
	            );*/
	            var top = Math.round(((height - dest_height) / 2)-(y-canvas_height/2));
	            var left = Math.round(((width - dest_width) / 2)-(x-canvas_width/2));
	            
            	var canvas = document.createElement('canvas');
	            // export canvas
	            canvas.width = dest_width;
	            canvas.height = dest_height;
	            
	            canvas.getContext('2d').drawImage($scope.resizecrop.img.canvas,
	            	left, top, dest_width, dest_height,
	            	0, 0, dest_width, dest_height
	            );
	            $scope.resizecrop.img.data = canvas.toDataURL($scope.resizecrop.img.type);
	            
	            //var img = document.createElement('img');
	            //img.src = $scope.resizecrop.img.data;
	            //document.getElementById('resizecrop').appendChild(document.createElement('p'));
			    //document.getElementById('resizecrop').appendChild(img);
	            
            }
            
            
			scaleImage();
			var canvas = document.createElement("canvas");
            draw();
            
            // if resizing multiple images for say a gallery, auto save
            if ($scope.filepicker.args.multi == true) {
            	$scope.resizecrop.save();
            }
            
			// zoom
			document.getElementById("resizecrop-zoom").onchange = function(evt) {
				scaleImage();
				draw();
			}
			
			// pan
			// x,y vector from image center to pointer grab location
			var	grab_x = 0, grab_y = 0;
		 	
            function move(e) {
            	// get offsets
            	var pageX,pageY, totalOffsetX = 0, totalOffsetY = 0, currentElement = this;
		    	
		    	// global position of mouse pointer
		    	if (e.pageX || e.pageY) { 
				  pageX = e.pageX;
				  pageY = e.pageY;
				}
				else { 
				  pageX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft; 
				  pageY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop; 
				}
				
				// global position of canvas top-left
				do{
			        totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
			        totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
			    }
			    while(currentElement = currentElement.offsetParent)
			    
			    // calc grab offset - on mouse down only
			    if (grab_x === 0 && grab_y === 0) {
				    grab_x = (pageX - totalOffsetX) - x;
				    grab_y = (pageY - totalOffsetY) - y;
			    }
			 	
			 	//console.log(totalOffsetX + crop_left+' < '+(pageX - width/2)+' < '+(totalOffsetX + crop_left + dest_width)+' -> x = '+(pageX - totalOffsetX));
			 	//console.log(totalOffsetY + crop_top+' < '+(pageY - height/2)+' < '+(totalOffsetY + crop_top + dest_height)+' -> y = '+(pageY - totalOffsetY));
			 	
			 	// x,y = center of image from canvas origin (top-left)
			 	
			 	// check if img is outside limits
			 	var left = (pageX - width/2 - grab_x < totalOffsetX + crop_left),
			 		right = (totalOffsetX + crop_left + dest_width  < pageX + width/2 - grab_x),
			 		top = (pageY - height/2 - grab_y < totalOffsetY + crop_top),
			 		bottom = (totalOffsetY + crop_top + dest_height < pageY + height/2 - grab_y);
			 	if (left && right){	// left
				 	x = (pageX - totalOffsetX) - grab_x;
			  	} else if(left) {
				  	x = crop_left + dest_width - width/2;
			  	} else if (right) {
				  	x = crop_left + width/2;
			  	}
			  	if (top && bottom){				// top
			  		y = (pageY - totalOffsetY) - grab_y;
			  	} else if (top){
			  		y = crop_top + dest_height - height/2;
			  	} else if (bottom) {
				  	y = crop_top + height/2;
			  	}
			  	
			  	//console.log('('+x+','+y+')');
			  	draw();
			}
			
			canvas.onselectstart = function(){ return false; };
			canvas.onmouseover = function (e){
				//canvas.onselectstart = function(){ return false; };
			}
			canvas.onmouseout = function (){
			 	//canvas.onselectstart = function(){ return true; };
			};
		    canvas.onmousedown = function (e){
		    	grab_x = 0, grab_y = 0;	// reset pan grab offset
			 	canvas.onmousemove = move;
			 	/*if (pageX < x + width + totalOffsetX &&
			 		pageX > x - width + totalOffsetX &&
			 		pageY < y + height + totalOffsetY &&
			 		pageY > y - height + totalOffsetY){
				 	x = pageX - totalOffsetX;
				 	y = pageY - totalOffsetY;
				 	//console.log('move: '+x+','+y+'');
				 	//dragok = true;
				 	canvas.onmousemove = move;
				}*/
				
		    	document.onselectstart = null;
			};
			canvas.onmouseup = function (){
			 	console.log('onmouseup');
			 	canvas.onmousemove = null;
			};
			
            
        };
        image.onerror = function() {
            //message("+= " + file.name + " does not look like a valid image");
        };
        image.src = $scope.resizecrop.img.src;
        
    };
    
    $scope.resizecrop.save = function() {
    	console.log('resizecrop.save');
    	var blob = dataURItoBlob($scope.resizecrop.img.data);
    	$scope.files[0] = blob;
    	$scope.uploadFiles();
    };
    
    $scope.camera = {};
    $scope.camera.save = function() {
    	console.log('camera.save');
    	console.log(filepicker.camera);
    	
    	if (!$scope.filepicker.camera.video.videoWidth
    		&& !$scope.filepicker.camera.video.videoHeight) return; // camera not loaded yet
    	
    	// reset canvas to camera size
    	$scope.filepicker.camera.canvas.width = $scope.filepicker.camera.video.videoWidth;
    	$scope.filepicker.camera.canvas.height = $scope.filepicker.camera.video.videoHeight;
    	
    	
    	// draw webcam picture in canvas
        $scope.filepicker.camera.ctx.drawImage(
        	$scope.filepicker.camera.video,
        	0, 0
        );
        // create data URL and insert into <img/>
        //$scope.filepicker.camera.img.src = $scope.filepicker.camera.canvas.toDataURL('image/png');
        
        //$scope.filepicker.camera.img.data = $scope.filepicker.camera.canvas.toDataURL($scope.filepicker.camera.img.type);
        
        // resize and crop
        $scope.files[0] = {
	    	name:'camera'+(+new Date())+'.png',
	    	type:'image/png'
        };
        $scope.resizecrop.initParams($scope.filepicker.camera.canvas.toDataURL('image/png'), 'image/png');
        $scope.resizecrop.generate();
        if ($scope.filepicker.args.multi == false) {
        	$scope.filepicker.args.service = 'RESIZECROP';
        	$scope.filepicker.cameraStop();
    	}
    };
    
    $scope.files = [];
    // Turn the FileList object into an Array - *** move to computer service
    $scope.setFiles = function(files) {
    	console.log('setFiles(files)');
      	console.log('files:', files);
      	
	    if (files.length > 0) {
            //$scope.$apply(function(){
	            $scope.files = [];
	            var error = false;
	            for (var i = 0; i < files.length; i++) {
	            	console.log(files[i]);
                	var extension = files[i].name.substr(files[i].name.lastIndexOf('.'));
                	//console.log(extension);
                	var allowedType = (
                		($scope.filepicker.args.types.indexOf('*/*') !== -1)
                		|| ($scope.filepicker.args.types.indexOf(files[i].type.substr(0, files[i].type.indexOf('/'))+'/*') !== -1)
                		|| ($scope.filepicker.args.types.indexOf(files[i].type) !== -1)
            		);
            		var allowedExtension = (
            			($scope.filepicker.args.extensions.length == 0)
            			|| ($scope.filepicker.args.extensions.indexOf(extension) !== -1)
            		);
                	// check type && extension
                	if (!allowedType) {
                		error = true;
	                	$scope.filepicker.alerts.push({
	                		'class':'error',
	                		'label':'Invalid File Type',
	                		'message':'Try: '+$scope.filepicker.args.types.join(', ')
	                	});
                	} else if (!allowedExtension) {
	                	$scope.filepicker.alerts.push({
	                		'class':'error',
	                		'label':'Invalid File Extension',
	                		'message':'Try: '+$scope.filepicker.args.extensions.join(', ')
	                	});
                	} else {
	                	$scope.files.push(files[i]);
                	}
                }
	            if ($scope.files.length) {
	                if ($scope.filepicker.args.resizecrop) {	// one file
	                	if ($scope.files[0].name.match(/^http/)) {	// url
		                	$scope.resizecrop.loadURL();
	                	} else {
		                	$scope.resizecrop.loadFile();
	                	}
	                } else {
		                $scope.uploadFiles();
	                }									
	            }
            //});
        }
    }
    
    // move to computer service
    $scope.uploadFiles = function() {
    	for (var i in $scope.files) {
        	console.log($scope.files[i]);
        	//if ($scope.files[i].type.match(/image.*/)) {
	        $scope.uploadFile($scope.files[i]);
        }
    };
    
    $scope.uploadFile = function(file) {
        console.log('uploadFile()');
        file || (file = $scope.files[0]);
        $scope.progressVisible = false;
        
        var fd = new FormData();
        fd.append("file", file);
        var xhr = new XMLHttpRequest();
        xhr.upload.addEventListener("progress", uploadProgress, false);
        xhr.addEventListener("load", uploadComplete, false);
        xhr.addEventListener("error", uploadFailed, false);
        xhr.addEventListener("abort", uploadCanceled, false);
        xhr.open("POST", $rootScope.settings.server+'/filepicker/computer/'+$scope.filepicker.args.action+'/'+$scope.filepicker.args.ID);
        $scope.progressVisible = true;
        xhr.send(fd);
        //console.log("POST /filepicker/computer/"+$scope.filepicker.args.action);
    };
    
    
    function uploadProgress(evt) {
    	//console.log('uploadProgress');
        $scope.$apply(function(){
            if (evt.lengthComputable) {
                $scope.progress = Math.round(evt.loaded * 100 / evt.total);
            } else {
                $scope.progress = 'unable to compute';
            }
        });
    }

    function uploadComplete(evt) {
    	console.log('uploadComplete');
    	$scope.$apply(function(){
    		$scope.progressVisible = false;
    		console.log(JSON.parse(evt.target.responseText));
	    	$scope.filepicker.alerts = [JSON.parse(evt.target.responseText)];
	    	$scope.filepicker.loadFiles();
        });
    }

    function uploadFailed(evt) {
    	console.log('uploadFailed');
        $scope.$apply(function(){
        	$scope.filepicker.alerts = [{
        		"class":"error",
        		"label":"Failed",
        		"message":"There was an error attempting to upload the file."
        	}];
        });
    }

    function uploadCanceled(evt) {
    	console.log('uploadCanceled');
        $scope.$apply(function(){
            $scope.progressVisible = false;
            $scope.filepicker.alerts = [{
            	"class":"error",
            	"label":"Canceled",
            	"message":"The upload has been canceled by the user or the browser dropped the connection."
            }];
        })

    }
    
    // used to create blob from resized and cropped image
    function dataURItoBlob(dataURI) {
	    var binary = atob(dataURI.split(',')[1]);
	    var array = [];
	    for(var i = 0; i < binary.length; i++) {
	        array.push(binary.charCodeAt(i));
	    }
	    return new Blob([new Uint8Array(array)], {type: 'image/png'});
	}
	
	//-- Remote Services --//
	
    //-- FTP --//
    $scope.ftp = {};
	$scope.ftp.connect = function(url, username, password) {
	    url = encodeURIComponent(url);
	    //$scope.settings.server+'/filepicker/url/'+url.replace(/\./g, '%2E');
	    $http.post($scope.settings.server+'/filepicker/url/'+$scope.filepicker.args.action+'/'+$scope.filepicker.args.ID, {url:url})
	    	.success(function(data){
	    		console.log('url.load.post.success');
	    		console.log(data);
	    		data = {target:{responseText:data}};
		    	uploadComplete(JSON.stringify(data));
	    	})
	    	.error(function(){
		    	console.log('url.load.post.error');
		    	uploadFailed();
	    	});
	    
    };
//}
}]);
//angular.module('io.controller.contact', [])
//.controller('ContactCtrl', ['$scope', '$http', '$routeParams', function($scope, $http, $routeParams) {
ContactCtrl.$inject = ['$scope', '$http'];
function ContactCtrl($scope, $http) {
	console.log('ContactCtrl ('+$scope.$id+')');
	$scope.errors = {};
	$scope.contact = {};

	$scope.sendMessage = function() {
		$scope.errors = {};

		$http.post($scope.settings.server+'/contact/', $scope.contact)
			.success(function(data) {
				console.log(data);
				if (data.alerts) $rootScope.alerts = data.alerts;
				if (data.errors) $scope.errors = data.errors;
				if (!data.alerts && !data.errors) {
					$scope.contact = {};
					$rootScope.alerts = [{'class':'success', 'label':'Message Sent'}];
				}
			});
	};

	$scope.joinNewsletter = function() {
		$scope.errors = {};
		$scope.contact.message = 'Please add me to your mailing list';

		$http.post($scope.settings.server+'/contact/', $scope.contact)
			.success(function(data) {
				console.log(data);
				if (data.alerts) $rootScope.alerts = data.alerts;
				if (data.errors) $scope.errors = data.errors;
				if (!data.alerts && !data.errors) {

					$rootScope.alerts = [{'class':'success', 'label':'Joined Newsletter'}];
				}
			});
	};
}
//}]);
angular.module('io.controller.follow', [])
.controller('FollowCtrl', ['$scope', '$http', function($scope, $http) {
//FollowCtrl.$inject = ['$scope', '$http'];
//function FollowCtrl($scope, $http) {
	//$scope = $scope;
	console.log('FollowCtrl ('+$scope.$id+')');
	
	// Extends $scope.follow;
	
	$scope.type = $scope.follow.type;
	
	$scope.follow_suggest = {};
	$scope.following = {};
	$scope.followers = {};
	
	//$scope.group_name = '';	// form
	//$scope.setFollowType = function(type) { $scope.type = type; };
	
	/*$scope.addFollow = function(id, group_ID) {
		$scope.follow.addFollow($scope.type, id, group_ID);
	};

	$scope.deleteFollow = function(id, group_ID) {
		$scope.follow.deleteFollow($scope.type, id, group_ID);
	};*/

	/*$scope.loadFollow = function(id) {
		$scope.follow.loadFollow($scope.type, id);
	};
	
	$scope.loadFollowers = function(id, query) {
		$scope.follow.loadFollow($scope.type, id, query);
	};*/
	
	$scope.loadFollowers = function(company_ID, user_ID, query) {
		//$scope.follow.loadFollowing($scope.type, id, query); // session user
		
		company_ID || (company_ID = 0);
		user_ID || (user_ID = 0);
		query || (query = '');
		$http.get($rootScope.settings.server+'/follow/ers/'+company_ID+'/'+user_ID+'/'+query)
			.success(function(data) {
				console.log('loadFollowing.get.success');
				console.log(data);
				console.log(typeof data);
				for (var i = 0, l = data.length; i < l; i++) {
					data[i].follower = (data[i].follower) ? true : false;
				}
				
				$scope.followers = data; // for profile page
			})
			.error(function() {
				console.log('loadFollowing.get.error');
				$rootScope.http_error();
			});
	};
	
	$scope.loadFollowing = function(company_ID, user_ID, query) {
		//$scope.follow.loadFollowing($scope.type, id, query); // session user
		
		company_ID || (company_ID = 0);
		user_ID || (user_ID = 0);
		query || (query = '');
		$http.get($rootScope.settings.server+'/follow/ing/'+company_ID+'/'+user_ID+'/'+query)
			.success(function(data) {
				console.log('loadFollowing.get.success');
				console.log(data);
				console.log(typeof data);
				for (var i = 0, l = data.length; i < l; i++) {
					data[i].following = (data[i].following) ? true : false;
				}
				
				$scope.following = data; // for profile page
			})
			.error(function() {
				console.log('loadFollowing.get.error');
				$rootScope.http_error();
			});
	};
	
	$scope.loadSuggestions = function() {
		console.log('loadSuggestions()');
		
		$http.get($rootScope.settings.server+'/follow/suggestions/'+true)
			.success(function(data) {
				console.log('loadSuggestions.get.success');
				console.log(data);
				for (var i = 0, l = data.length; i < l; i++) {
					data[i].following = (data[i].following) ? true : false;
					if (data[i]['company_ID']) $scope.follow.db.company[data[i]['company_ID']] = data[i];
					else if (data[i]['user_ID']) $scope.follow.db.user[data[i]['user_ID']] = data[i];
				}

				if (objectLength(data)) $scope.follow_suggest = data;
				console.log($rootScope.objectLength($scope.follow_suggest));
			})
			.error(function() {
				console.log('loadSuggestions.get.error');
				$rootScope.http_error();
			});
	};

	
	
	// search following and followers
	/*$scope.search = function(query) {
		$scope.search_results = [];
		// follow = 'ing' or 'ers'
		
		$http.get($rootScope.settings.server+'follow/search/'+follow+'/'+query+'/'+type)
			.success(function(data) {
				data = data.toString();
				console.log(data);
				$scope.groups[data] = {
					group_name:$scope.group_name,
					group_ID:data,
					group_count:0,
					color:color
				};
				console.log($scope.groups);
				$scope.group_name = ""; // clear form
			});
		
		if (follow == 'ing') {
			
		} else if (follow == 'ers') {
			
		}
	};*/
	
	$scope.loadGroups = function() {
		$scope.follow.loadGroups();
	};
	
	
	
	
	$scope.require_signin(function(){
		$scope.loadGroups();
	});
//}
}]);
//angular.module('app.controller.message', [])
//.controller('AppCtrl',
//['$rootScope', '$scope', '$http', '$follow', '$filepicker',
//function(rootScope, $scope, $http, follow, filepicker) {
MessageCtrl.$inject = ['$scope', '$http', '$routeParams'];
function MessageCtrl($scope, $http, $routeParams) {
	console.log('MessageCtrl ('+$scope.$id+')');

	$scope.to_name = "";
	$scope.compose = {};
	
	$scope.list = [];	// inbox
	$scope.thread = [];	// messages in conversation
	
	// inbox
	$scope.loadMessages = function() {
		console.log('loadMessages()');
		$http.get($rootScope.settings.server+'/message/list')
			.success(function(data) {
				console.log('loadMessages.get.success');
				console.log(data);
				//$scope.dbing[id].name = data.name;
				
				$scope.list = data;
			})
			.error(function() {
				console.log('loadMessages.get.error');
				//$rootScope.http_error();
			});
	};
	
	// conversation
	$scope.loadThread = function(user_ID, to_name) {
		console.log('loadThread('+user_ID+')');
		user_ID || (user_ID = 0);
		
		$rootScope.message.compose = {
			user_ID:user_ID
		};
		$rootScope.message.to_name = to_name;
		
		$http.get($rootScope.settings.server+'/message/'+user_ID)
			.success(function(data) {
				console.log('loadThread.get.success');
				console.log(data);
				//$scope.dbing[id].name = data.name;
				$rootScope.message.to_name = data.user.user_name_first+' '+data.user.user_name_last;
				
				$scope.thread = data.thread;
				
				setTimeout(function() {
					$scope.scrollBottom();
				}, 100);
				
				// update unread count
				$rootScope.message.updateUnreadCount();
			})
			.error(function() {
				console.log('loadThread.get.error');
				//$rootScope.http_error();
			});
	};
	
	$scope.send = function() {
		$scope.thread.push({
			user_from_ID:$rootScope.session.user_ID,
			message:$rootScope.message.compose.message,
			timestamp:(+new Date)/1000
		});
		
		$rootScope.message.send();
		
		setTimeout(function() {
			$scope.scrollBottom();
		}, 100);
		
	};
	
	$scope.scrollBottom = function(){
		var t = document.getElementById('thread');
    	t.scrollTop = t.scrollHeight;
	};
	
	$scope.loadMessages();
	if ($routeParams.user_ID) {
		$scope.loadThread($routeParams.user_ID);
	}
}

angular.module('io.init.rootScope', [])
.run(
	['$rootScope', '$locale', '$cookies', '$http', '$window', '$location',
	function($rootScope, $locale, $cookies, $http, $window, $location) {
	console.log('io.init.rootScope ('+$rootScope.$id+')');
 	
 	/*$rootScope.$watch(function () {
	  	return $location.path();
	  }, function(value) {
	  	console.log("run ************");
      	$rootScope.updateSession();
    });*/
    
	$rootScope.default_settings = {
		'client'			:'',	// https://static.domain.com/
		'server'			:'',	// https://api.domain.com/
		'proxy'				:'',	// https://proxy.domain.com/ // for importing photos into filepicker
		'dashboard'			:'app', // app dashboard ie #/app
		//'offline'			:[],	// name of object that will be stored offline
		//'class':{},
		'i18n':{
			'default'		:'en-ca',	// default lang
			'lang'		:[						// array of file names, in lang only folder ie en
				//'countries',					// {'country_code':'country_name'}
				'languages'						// {'en-ca':'English (Canadian)'}
			],
			'lang-locale'		:[				// array of file names, in locale folder ie en-ca
				'app',
				'angular-io'
			],
			'options'		:[]			// 'en-ca' use country locals
		},
		'json':{					// load json files into $rootScope.json = {key:value};
			//'key':'FILENAME',		// json/FILENAME.json
		},
		'password':{				// As per OWASP
			'min_timestamp'	:0,		// all password must be new then this unix_timestamp (sec)
			'max_age'		:90,	// max number of days a password is allowed to be used (days)
			'min_length'	:10,	// OWASP:10
			'min_params'	:3,		// OWASP:3
			'min_upper'		:1,		// OWASP:1
			'min_lower'		:1,		// OWASP:1
			'min_number'	:1,		// OWASP:1
			'min_special'	:1		// OWASP:1
		},
		'account': {
			'user_name'		:false,	// Require username in profile
			'company'		:false,
			'company_user'	:false
		},
		'notify': {},		// notify setting defaults - must sync with message.json
		'security': {
		},
		'onboard':{
			'required'		:false,	// always true
			'start'			:''		// url of dashboard ie #/app
		},
		'filepicker': {
			'user_single_image': {
				action:'user_single_image',
				types: ['image/*'],
				extensions: ['.jpg', '.jpeg', '.gif', '.bmp', '.png'],
				services: ['COMPUTER'],
				service: 'COMPUTER',
				multi:false,
				resizecrop:true,
				width:200,
				height:200
			},
			'company_single_image' : {
				action:'company_single_image',
				types: ['image/*'],
				extensions: ['.jpg', '.jpeg', '.gif', '.bmp', '.png'],
				services: ['COMPUTER'],
				service: 'COMPUTER',
				multi:false,
				resizecrop:true,
				width:300,
				height:200
			}
		}
		
	};
	
	//-- add in default settings if not set --//
	$rootScope.settings = syncVar($rootScope.settings, $rootScope.default_settings);
	delete $rootScope.default_settings;
	console.log('$rootScope.settings:');
	console.log($rootScope.settings);
	
	//!-- Session --//
	$rootScope.session = db.get('session', {});
	$rootScope.resetSession = function() {
		console.log('resetSession()');
		console.log($rootScope.$id);
		$rootScope.session = {};
		db.set('session', $rootScope.session);
	};
	$rootScope.saveSession = function() {
		console.log('saveSession()');
		if ($rootScope.session.save) {
			db.set('session', $rootScope.session);
		}
	};
	$rootScope.updateSession = function(callback) {
		console.log('updateSession(callback)');
		console.log(callback);
		
		$http.get($rootScope.settings.server+'/account/session')	// re-get session data if currently no storing any
			.success(function(data) {
				console.log('updateSession.get.success');
				console.log(data);
				if (data == []) {
					$rootScope.href('#/sign/out');
				} else {
					$rootScope.session = syncVar(data, $rootScope.session);
					//$rootScope.session.timestamp = +new Date();
					
					$rootScope.saveSession();
					if (callback) $rootScope.$eval(callback());
				}
			})
			.error(function() {
				console.log('updateSession.get.error');
				$rootScope.http_error();
			});
	};
	$rootScope.regenSession = function() {
		console.log('regenSession()');
		$http.get($rootScope.settings.server+'/account/regen')
			.success(function(data) {
				console.log('regenSession.get.success');
			})
			.error(function() {
				console.log('regenSession.get.error');
				$rootScope.http_error();
			});
	};
	$rootScope.checkSession = function(callback) {
		console.log('checkSession(callback)');
		console.log(callback);
		
		$http.get($rootScope.settings.server+'/account/signcheck')
			.success(function(data) {
				console.log('checkSession.get.success');
				console.log(data);
				if (parseInt(data, 10)) {	// has active cookie
					if (objectIsEmpty($rootScope.session)) {
						$rootScope.updateSession(callback);
					} else if (callback) {
						$rootScope.$eval(callback());
					}
				} else if ($rootScope.session.user_ID) {
					$rootScope.href('#/sign/out');
				}
			})
			.error(function() {
				console.log('checkSession.get.error');
				$rootScope.http_error();
			});
	};
	$rootScope.require_signin = function(callback) {
		console.log('require_signin(callback)');
		console.log(callback);
		//console.log($rootScope.settings);
		//console.log($rootScope.session);
		
		// not signed in -> sign/in
		if (objectIsEmpty($rootScope.session)) {
			if ($rootScope.uri() != '#/sign/in') { // prevent redirect loop
				$cookies.redirect = $rootScope.uri().substr(2);
				$rootScope.href('#/sign/in');
			}
		
		// email not confirmed -> onboard
		} else if ($rootScope.settings.onboard.required && !$rootScope.session.email_confirm && $rootScope.uri().match(/#\/onboard\/email/) === null) {
			console.log("email not confirmed = "+($rootScope.settings.onboard.required)+" && "+!$rootScope.session.email_confirm+" && "+($rootScope.uri().match(/#\/onboard/) === null));
			$rootScope.href('#/onboard/email');
		
		// haven't completed manditory onboard steps -> onboard
		} else if ($rootScope.settings.onboard.required && !$rootScope.session.timestamp_create && $rootScope.uri().match(/#\/onboard/) === null) {
			console.log("onboard not completed = "+($rootScope.settings.onboard.required)+" && "+!$rootScope.session.timestamp_create+" && "+($rootScope.uri().match(/#\/onboard/) === null));
			$rootScope.href('#/onboard/'+$rootScope.settings.onboard.start);
		
		// has an old password -> change pass
		} else if ($rootScope.settings.password.max_age && $rootScope.session.password_age > $rootScope.settings.password.max_age) {
			console.log(($rootScope.settings.password.max_age)+" && "+($rootScope.session.password_age > $rootScope.settings.password.max_age));
			$rootScope.href('#/onboard/password');
		
		// force password change set -> change password
		} else if ($rootScope.settings.password.min_timestamp && $rootScope.session.password_timestamp < $rootScope.settings.password.min_timestamp) {
			$rootScope.href('#/onboard/password');
		
		// all good -> eval callback
		} else if (callback) {
			$rootScope.$eval(callback());
		}
	};
	//$rootScope.checkSession(); // new load - recheck
	//!-- End Session --//

	//!-- Loading Screen --//
	$rootScope.loader = {
		width:0,
		details:'',
		count:0,
		total:(
			objectLength($rootScope.settings['class'])
			+$rootScope.settings.i18n['lang'].length
			+$rootScope.settings.i18n['lang-locale'].length
			+$rootScope.settings.i18n['json'].length
			//+$rootScope.settings['json'].length
			+objectLength($rootScope.settings.json)
		)
	};

	$rootScope.$on('loaderEvent', function(e, name) {
		name = name ? name.replace(/[^0-9a-zA-Z]/g, ' ') : '';
		++$rootScope.loader.count;
		console.log($rootScope.loader.count+' / '+$rootScope.loader.total+' '+name);

		if ($rootScope.loader.count < $rootScope.loader.total) {	// progress bar
			$rootScope.loader.width = (($rootScope.loader.count / $rootScope.loader.total)*100);
			$rootScope.loader.details = name;
		}
	});
	//!-- End Loading Screen --//

	// Events
	$rootScope.$on('$viewContentLoaded', function(event) {
		
	});
	$rootScope.$on('$includeContentLoaded', function(event) {
		
	});
	

	//!-- Global Vars --//
	$rootScope.set = function(key, value) { $rootScope[key] = value; };
	
	$rootScope.device 	= (typeof device != 'undefined') ? device : false; // cordova active?
	$rootScope.loading 	= false;	// nav bar loading indicator
	$rootScope.sliderNav 	= -1;		// slider nav state (-1,+1)
	$rootScope.alerts 	= [];	// for alert-fixed-top
	$rootScope.modal 	= {};	// for alertModal
	$rootScope.datetime = new Date();
	$rootScope.timezone_min = new Date().getTimezoneOffset();
 	
 	$rootScope.i18n = {};
	$rootScope.json = {
		"regions":{}
	};
	
	// clear alerts on page change
	$rootScope.$watch(function () {
	  	return $location.path();
	  }, function(value) {
      	$rootScope.alerts = [];
    });
	
	//!-- JSON -- //
	$rootScope.loadJSON = function(key, file, folder) {
		folder || (folder = 'json');
		console.log('loadJSON('+key+', '+file+')');
		$http.get($rootScope.settings.client+'/'+folder+'/'+file+'.json')
			.success(function(data){
				console.log('loadJSON.get('+key+'/'+file+').success');
				//console.log(data);
				//$rootScope.json[config.id] = data;
				$rootScope.$emit('loaderEvent', key);
				$rootScope.json[key] = data;
			})
			.error(function(){
				console.log('loadJSON.get('+key+'/'+file+').error');
				$rootScope.$emit('loaderEvent', key);
				$rootScope.json[key] = {};
			});
	};

	for (var key in $rootScope.settings.json) {
		$rootScope.loadJSON(key, $rootScope.settings.json[key]);
	}
	
	//!-- Lang --//
	$rootScope.init = function() {
		//$rootScope.locale 	= localStorage.getItem('locale');	
		//$rootScope.locale || ($rootScope.locale = localStorage.setItem('locale', $locale.id));// en-ca
		$rootScope.locale = db.get('locale', $locale.id);
								
	 	$rootScope.language = db.get('language', $rootScope.locale.substr(0,2)); 	// en
		db.set('language', $rootScope.language);
	 	if ($rootScope.locale.length > 2) {
			$rootScope.country_code = $rootScope.locale.substr(3,2).toUpperCase();
			db.set('country_code', $rootScope.country_code);
		} else {
			$rootScope.country_code = db.get('country_code', $locale.id.substr(3,2).toUpperCase());
		}
	};
	$rootScope.changeLocale = function(locale) {
		//localStorage.setItem('locale', locale);
		db.set('locale', locale);
		db.set('language', locale.substr(0,2));
		
		if (locale.length > 2) {
			db.set('country_code', locale.substr(3,2).toUpperCase());
		}
		
		window.location.reload();
	};
	$rootScope.loadLocaleFile = function(locale, file) {
		console.log('loadLocaleFile('+locale+', '+file+')');
		
		$http.get($rootScope.settings.client+'/i18n/'+locale+'/'+file+'.json')
			.success(function(data) {
				console.log('loadLocaleFile.get('+locale+'/'+file+').success');
				//console.log(data);
				for (var key in data) { $rootScope.i18n[key] = data[key]; }
				$rootScope.i18n.id = locale;
				$rootScope.$emit('loaderEvent', locale);
			})
			.error(function(data, status, headers, config) {
				console.log('loadLocaleFile.get('+locale+'/'+file+').error');
				if (locale.length == 2) $rootScope.loadLocaleFile($rootScope.settings.i18n['default'], file);	// load default if root lang doesn't exist
				else $rootScope.loadLocaleFile(locale.substr(0,2), file);
			});
	};
	$rootScope.loadLocale = function() {
		console.log('loadLocale()');
		
		for (var i = 0, l = $rootScope.settings.i18n['lang'].length; i < l; i++) {
			console.log($rootScope.language+'/'+$rootScope.settings.i18n['lang'][i]);
			$rootScope.loadLocaleFile($rootScope.language, $rootScope.settings.i18n['lang'][i]);
		}
		for (var i = 0, l = $rootScope.settings.i18n['lang-locale'].length; i < l; i++) {
			console.log($rootScope.locale+'/'+$rootScope.settings.i18n['lang-locale'][i]);
			$rootScope.loadLocaleFile($rootScope.locale, $rootScope.settings.i18n['lang-locale'][i]);
		}
		for (var i = 0, l = $rootScope.settings.i18n['json'].length; i < l; i++) {
			console.log($rootScope.language+'/'+$rootScope.settings.i18n['json'][i]);
			$rootScope.loadJSON($rootScope.settings.i18n['json'][i], $rootScope.language+'/'+$rootScope.settings.i18n['json'][i], 'i18n');
		}
	};
	//!-- End Lang --//

	
	//!-- JSON Special Cases --//
	$rootScope.loadRegions = function(country_code) {
		$rootScope.json.regions || ($rootScope.json.regions = {});
		if ($rootScope.json.regions[country_code]) { return; }
		
		console.log('loadRegions('+country_code+')');
		$http.get($rootScope.settings.client+'/i18n/'+$rootScope.language+'/geo/'+country_code+'.json')
			.success(function(data){
				console.log('loadRegions.get.success');
				$rootScope.json.regions[country_code] = data;
			})
			.error(function(){
				console.log('loadRegions.get.error');
			});
	};
	
	$rootScope.init();
	$rootScope.loadLocale($rootScope.locale); // $locale.id == 'en-us'
	
	$rootScope.json.month = $locale.DATETIME_FORMATS.SHORTMONTH;
	// days in a month
	$rootScope.json.day = function(year, month) {
		var day = {};
		if (year && month) {
			for (var i = 1, l = (32 - new Date(year, month, 32).getDate()); i<=l; i++) {
				key = numberPadding(i.toString(), 2);
				day[key] = key;
			}
		}
		return day;
	};
	//!-- End JSON --//
	
	
	//!-- Classes --//
	/*$rootScope.loadClass = function(key, _var) {
		console.log('loadClass('+key+')');
		$rootScope[key] = _var;
		$rootScope.$emit('loaderEvent', key);
	};

	for (var key in $rootScope.settings['class']) {
		$rootScope.loadClass(key, $rootScope.settings['class'][key]);
		//delete key;	// remove from global scope
	}*/
	//!-- End Classes --//
	
	//!-- Offline Sync --// ***** needs testing!!!!
	// que requests for when connection re-established
    
	// settings.offline = []
	$rootScope.offline = db.get('offline', {
		"_state":!$window.navigator.onLine,
		"_requests":[],
		"_count":0
	});
	
	$rootScope.offline.que_request = function(http_config, callback) {
		console.log('offline.que_request(http_config, callback)');
		callback || (callback = function(){});
		
		$rootScope.offline._requests.push({http_config:http_config, callback:callback});
		$rootScope.offline.store();
	};
	
	$rootScope.offline.run_request = function() {
		console.log('offline.run_request()');
		if (!$rootScope.offline._requests.length) return;
		$rootScope.loading = true;
		
		//$rootScope.$emit('loaderEvent', 'Processing offline requests.');
		
		var request = $rootScope.offline._requests.shift();
		console.log('offline.run_request.http('+request.http_config.method+' '+request.http_config.url+' '+JSON.stringify(request.http_config.data)+')');
		$http(request.http_config)
			.success(function(data, status, headers, config) {
				console.log('offline.run_request.http.success');
				//$rootScope.offline._count--;
				if (request.callback) request.callback(data, status, headers, config);
				$rootScope.loading = false;
				$rootScope.offline.store();
				$rootScope.offline.run_request();
			})
			.error(function(data, status, headers, config) {
				console.log('offline.run_request.http.error');
				console.log(''+JSON.stringify(data)+', '+status+', '+headers+', '+JSON.stringify(config)+'');
				$rootScope.offline._requests.unshift(request);
				$rootScope.loading = false;
			});
	};
	
	
	$rootScope.offline.store = function() {
		db.set('offline', {
			"_state":$rootScope.offline._state,
			"_requests":$rootScope.offline._requests,
			"_count":$rootScope.offline._requests.length
		});
	};
	
	$rootScope.offline.alertOffline = function() {
		console.log('offline.alertOffline()');
		$rootScope.modal = {
			hide:{
				header:false,
				close:false,
				footer:false
			},
			header:$rootScope.i18n.alert_online_offline_label,
			content:$rootScope.i18n.alert_online_offline_message,
			buttons:[
				{
					"class":"btn-primary",
					value:"Ok",
					callback:function(){}
				}
			]
		};
		$('#alertModal').modal('show');
	};
	
	$rootScope.offline.alertOnline = function() {
		console.log('offline.alertOnline()');
		$rootScope.modal = {
			hide:{
				header:false,
				close:false,
				footer:false
			},
			header:$rootScope.i18n.alert_offline_online_label,
			content:$rootScope.i18n.alert_offline_online_message,
			buttons:[
				{
					"class":"btn-primary",
					value:"Ok, Thanks!",
					callback:function(){}
				}
			]
		};
		$('#alertModal').modal('show');
	};
	
	//$rootScope.offline.run_request();
	
	// $http.get().error()
	$rootScope.http_error = function() {
		$rootScope.alerts = [{'class':'error', 'label':'Connection Error:', 'message':'We were unable to complete you request at this time.'}];
	}
	
	$window.addEventListener("online", function () {
		console.log('Event online');
		if ($rootScope.offline._state) {	// was offline
			$rootScope.offline.alertOnline();
			setTimeout(function() {  // timeout is required to bypass some weird bug in angular **
	          $rootScope.offline.run_request();
	        }, 1000);
			$rootScope.checkSession();
		}
        $rootScope.offline._state = false;
        $rootScope.$digest();
    }, true);
    
    $window.addEventListener("offline", function () {
        console.log('Event offline');
        $rootScope.offline._state = true;
        $rootScope.offline.alertOffline();
        $rootScope.$digest();
    }, true);
	
	//!-- End Offline Sync --//

	//!-- Page Functions --//
	// get current uri with leading #
	$rootScope.uri = function() {
		var uri = ($location.$$url.indexOf("?") == -1)
			? $location.$$url
			: $location.$$url.substr(0, $location.$$url.indexOf("?"));
		return "#"+uri;
	};
	
	// redirect to new page
	$rootScope.href = function(url, open) {
		url || (url = '#');
		console.log('href -> '+url);
		if (open) window.open(url, '_blank', 'location=yes'); // http://docs.phonegap.com/en/edge/cordova_inappbrowser_inappbrowser.md.html#InAppBrowser
		else window.location.href=url;
	};
	
	// refreshes current page
	$rootScope.refresh = function() {
		$rootScope.href($rootScope.uri()+'?'+(+new Date()));	// ? forces a refresh of user data
	};
	
	
	// history tracking - research History API - migrate?
	$rootScope.history = history;
	/*$rootScope.back_history = [];
	$rootScope.add_history = function() {
		var uri = $rootScope.uri();
		if ($rootScope.back_history[$rootScope.back_history.length-1] != uri)
			$rootScope.back_history.push(uri);	// prevent logging reloads
	};
	$rootScope.back = function() {
		if ($rootScope.back_history.length < 2) $rootScope.back_history.unshift('#/');
		$rootScope.back_history.pop();	// current
		var uri = $rootScope.back_history.pop();	// last -> will be added back on refresh
		$rootScope.href(uri);
	};
	$rootScope.back_init = function() {
		var uri = $rootScope.uri();
		if ($rootScope.back_history[$rootScope.back_history.length-1] != uri)
			$rootScope.back_history.push(uri);	// prevent logging reloads
		$rootScope.add_history();
	};*/
	
	// load scripts and styles on the fly
	$rootScope.loadStyle = function(filename) {
		var headID = document.getElementsByTagName("head")[0];
		var cssNode = document.createElement('link');
		cssNode.type = 'text/css';
		cssNode.rel = 'stylesheet';
		cssNode.href = filename;
		cssNode.media = 'screen';
		headID.appendChild(cssNode);
	};
	$rootScope.unloadStyle = function(filename) {
		var allCtrl = document.getElementsByTagName('link');
		for (var i=allCtrl.length; i>=0; i--)  { //search backwards within nodelist for matching elements to remove
			if (allCtrl[i] && allCtrl[i].getAttribute("href")!=null && allCtrl[i].getAttribute("href").indexOf(filename)!=-1)
				allCtrl[i].parentNode.removeChild(allCtrl[i]);
		}	
	};
	$rootScope.loadScript = function(filename, callback) {
		var headID = document.getElementsByTagName("head")[0];         
		var newScript = document.createElement('script');
		newScript.type = 'text/javascript';
		newScript.src = filename;
		newScript.onreadystatechange = callback;
		newScript.onload = callback;
		headID.appendChild(newScript);
	};
	
	$rootScope.unloadScript = function(filename) {
		var allCtrl = document.getElementsByTagName('script');
		for (var i=allCtrl.length; i>=0; i--)  { //search backwards within nodelist for matching elements to remove
			if (allCtrl[i] && allCtrl[i].getAttribute("src")!=null && allCtrl[i].getAttribute("src").indexOf(filename)!=-1)
				allCtrl[i].parentNode.removeChild(allCtrl[i]);
		}	
	};
	//!-- End Page Functions --//
	
	//!-- Validation --//
	$rootScope.validate = {};
	// Called via data-ng-change="validate.function(scope, value, value2, value3, settings)"
	// return true to show error message
	
	// Password
	// 
	// Called from:
	// page/reset
	// page/sign
	// user/edit
	$rootScope.validate.password = function(scope, value, sameas, settings) {
		console.log('validate.password(scope, "'+value+'", "'+sameas+'", settings)');
		console.log(settings);
		
		value || (value = '');
		sameas || (sameas = '');
		// https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Password_Complexity
	
		scope.$error = {};
		if (!value.length) {	// clear errors is blank
			scope.$valid = objectIsEmpty(scope.$error);
			scope.$invalid = !scope.$valid;
			return;
		}
	
		if (value.length < settings.min_length) scope.$error.minlength = true;
	
		// [has,count]
		var params = {
			lower:[0,0],
			upper:[0,0],
			number:[0,0],
			special:[0,0]
		};
	
		for (i = 0; i < value.length; i++) {
			if 		("abcdefghijklmnopqrstuvwxyz".indexOf(value.charAt(i)) > -1) 			{params.lower[0] = 1; ++params.lower[1];}
			else if ("ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(value.charAt(i)) > -1) 			{params.upper[0] = 1; ++params.upper[1];}
			else if ("0123456789".indexOf(value.charAt(i)) > -1) 							{params.number[0] = 1; ++params.number[1];}
			else if ("~!@#$%^&*()_+{}|:\"<>? `-=[]\;',./�".indexOf(value.charAt(i)) > -1) 	{params.special[0] = 1; ++params.special[1];}
	
			// more then two identical chars in a row
			if (i > 1 && value.charAt(i) == value.charAt(i-1) && value.charAt(i) == value.charAt(i-2)) {
				scope.$error.identical = true;
			}
		}
	
		// must have n/4 params at min
		if (params.lower[0]+params.upper[0]+params.number[0]+params.special[0] < settings.min_params) {
			scope.$error.upper 		= (params.upper[1] < settings.min_upper);
			scope.$error.lower 		= (params.lower[1] < settings.min_lower);
			scope.$error.number 	= (params.number[1] < settings.min_number);
			scope.$error.special 	= (params.special[1] < settings.min_special);
		}
	
		if (value === sameas) scope.$error.sameas = true;
	
		scope.$valid = objectIsEmpty(scope.$error);
		scope.$invalid = !scope.$valid;
		//console.log(scope);
	};
	
	
	//!-- End Validation --//
	
	//!-- JS Functions --//
	// called from inside HTML templates 
	
	$rootScope.inArray = function(needle, haystack) {
		if (!haystack) return false;
	    for (var i = 0, l = haystack.length; i < l; i++) {
	        if (haystack[i] == needle) return true;
	    }
	    return false;
	};
	
	$rootScope.objectIsEmpty = function(obj) {
	    for (var p in obj) return false;
		return true;
	};

	$rootScope.objectLength = function(obj) {
	  	var c = 0;
	    for (var p in obj) if (obj.hasOwnProperty(p)) ++c;
	    return c;
	};
	
	$rootScope.objectArray = function(obj) {
		var arr = [];
	    for (var i in obj) {
	        arr.push(obj[i]);
	    }
	    return arr;
	};
	
	//!-- End JS Functions --//
}]);

angular.module('io.init.settings', [])
.run(['$rootScope', function($rootScope) {
	console.log('io.init.settings ('+$rootScope.$id+')');
	//$rootScope.version = "β.7.5";
	$rootScope.settings = {
		'client'		:'',				// https://static.domain.com
		'server'		:'',				// https://api.domain.com
		
		'dashboard'		:'app',				// app dashboard ie #/app - special button
		//'offline'		:[],
		//'class':{							// add in classes at root level ($rootScope.class_name.class_attr)
			//'validate':validate,			// validation (password)
			//'filepicker':filepicker,		// file picker
			//'follow':{},					// follow
		//},
		'i18n':{
			'default'	:'en',				// default locale
			'lang'		:[					// array of file names, in lang only folder ie en
				//'countries',				// {'country_code':'country_name'}
				//'languages'				// {'en-ca':'English (Canadian)'}
			],
			'lang-locale':[					// array of file names, in locale folder ie en-ca
				'angular-io',
				'app'
			],
			// load json files into $rootScope.json[key] = JSON.parse(file);
			'json'		:[						// array of file names, in lang only folder ie en to be placed in a list
				'countries',					// {'country_code':'country_name'}
				'languages',					// {'en-ca':'English (Canadian)'}
				'user_levels'
			],
			'options'	:['en']					// which locales to allow
		},
		'json':{								// load json files into $rootScope.json[key] = JSON.parse(file);
			'calling_codes'	:'calling_codes',	// {'country_code':'calling_code'}
		},
		'account': {
			'user_name'		:false,	// Require username in profile
			'company'		:false,
			'company_username':false
		},
		'notify': {		// notify setting defaults - must sync with message.json
		 	"new_message":{"email":false},
		 	"new_follow":{"email":false}
		},
		// pulgins //
		// onboard - view/onboard
		'onboard':{
			'required'		:true,		// always true
			'start'			:'user'		// ** make smart so not needed
		},
		'filepicker': {
			'user_single_image': {
				action:'user_single_image',
				types: ['image/*'],
				extensions: ['.jpg', '.jpeg', '.gif', '.bmp', '.png'],
				services: ['COMPUTER', 'URL'],//, 'CAMERA'
				service: 'COMPUTER',
				multi:false,
				resizecrop:true,
				width:200,
				height:200
			},
			'company_single_image' : {
				action:'company_single_image',
				types: ['image/*'],
				extensions: ['.jpg', '.jpeg', '.gif', '.bmp', '.png'],
				services: ['COMPUTER', 'URL'],
				service: 'COMPUTER',
				multi:false,
				resizecrop:true,
				width:300,
				height:200
			}
		},
		'follow':'user'
		// browser plugin - view/page/sign 
		//'browser': BrowserDetect	// option
	};
	//$rootScope.sliderNav = 1;
}]);

angular.module('app.route', [])
.config(
['$routeProvider',
function($routeProvider) {
	var _view_ = 'view/', _app_ = 'app/';
	$routeProvider
		
		// Angular.io Routes //
		// sign up/in/reset
		.when('/sign/:action', 			{templateUrl:_view_+'account/sign.html'})
		.when('/confirm/:confirm_hash', {templateUrl:_view_+'account/sign.html'})
		.when('/reset/:reset_hash', 	{templateUrl:_view_+'account/reset.html'})
		
		// user
		//when('/user/follow', 		{templateUrl:_view_+'user/follow.html'})
		.when('/user/message', 			{templateUrl:_view_+'user/message.html'})
		.when('/user/message/:user_ID', {templateUrl:_view_+'user/message.html'})
		.when('/user/invite', 			{templateUrl:_view_+'user/invite.html'})
		
		//.when('/profile/:profile_name', {templateUrl:_view_+'user/profile.user.html'}) // used for profile name
		.when('/profile/:profile_name', {templateUrl:_view_+'user/profile.company.html'}) // used for profile name
		.when('/user/profile', 			{templateUrl:_view_+'user/profile.user.html'})
		.when('/user/profile/:profile_ID', {templateUrl:_view_+'user/profile.user.html'})
		.when('/company/profile', 		{templateUrl:_view_+'user/profile.company.html'})
		.when('/company/profile/:profile_ID', {templateUrl:_view_+'user/profile.company.html'})

		// onboard
		.when('/onboard/password', 		{templateUrl:_view_+'onboard/password.html'})	// special case - force password change
		.when('/onboard/:page', 		{templateUrl:_view_+'onboard.html'})
		.when('/onboard/:page/:action', {templateUrl:_view_+'onboard.html'})
		
		// hub pages
		.when('/settings/:page', 		{templateUrl:_view_+'settings.html'})
		.when('/support/:page', 		{templateUrl:_view_+'support.html'})
		
		
		// application
		.when('/app', 					{templateUrl:_view_+_app_+'index.html'})
		
		
		// fallback
		.when('/', 						{templateUrl:_view_+_app_+'index.html'})
		.when('/:page', 				{templateUrl:_view_+'page.html'})
		.otherwise({redirectTo:'/'});
	
	// configure html5 to get links working
	// If you don't do this, you URLs will be base.com/#/home rather than base.com/home
	//$locationProvider.html5Mode(true);
}]);

//(function(window, angular, undefined) {
//'use strict';

// io settings
angular.module('io.config', []).value('io.config', {});

angular.module('io.controllers', [
	'io.controller.company',
	'io.controller.confirm',
	'io.controller.onboard',
	'io.controller.page',
	'io.controller.reset',
	'io.controller.sign',
	'io.controller.user',
	'io.controller.password'
]);
angular.module('io.directives', ['io.config', 'io.directive.htmlExtend', 'io.directive.inputMask']);
angular.module('io.filters', ['io.config', 'io.filter.format', 'io.filter.range']);
angular.module('io.factories', ['io.config']);
angular.module('io.init', ['io.config', 'io.init.settings', 'io.init.rootScope']);


// io plugings
angular.module('io.markdown', 		['io.config', 'io.directive.markdown']);
angular.module('io.follow', 		['io.config', 'io.factory.follow', 'io.controller.follow']);
angular.module('io.message', 		['io.config', 'io.filter.truncate', 'io.factory.message']);
angular.module('io.filepicker', 	['io.config', 'io.factory.filepicker', 'io.controller.filepicker']);
angular.module('io.accessibility', 	['io.config', 'io.factory.accessibility']);

angular.module('io.plugins', 		['io.follow', 'io.message', 'io.filepicker', 'io.accessibility', 'io.markdown']);

angular.module('io', ['io.directives', 'io.filters', 'io.factories', 'io.plugins', 'io.init', 'io.config']);


// app settings
angular.module('app.config', []).value('app.config', {});

angular.module('app.controllers', [
	'io.controller.contact',
	
	// app
	'app.controller.root',
	'app.controller.dashboard'
]);

angular.module('app.directives', ['app.config', 'ui.directives.if', 'ng.components']);
angular.module('app.filters', ['app.config']);
angular.module('app.factories', ['app.config']);

angular.module('app.init', ['app.config', 'app.route']);

var app = angular.module('app', ['ngCookies', 'io', 'app.directives', 'app.filters', 'app.factories', 'app.init', 'app.config']);



/*angular.element(document.documentElement).ready(function() {
	console.log('*** READY **');
    
    var locale = JSON.parse(localStorage.getItem('locale'));    
    //var url = 'i18n/angular-locale_'+locale+'.js';
    //if (locale) document.write('<script src="js/vendor/i18n/angular-locale_'+locale+'.js"><\/script>');
    
    //angular.bootstrap(document,['app']);
});*/

//})(window, window.angular);

/*window.onload = function() {
	console.log('Load any missing CDN scripts');
	
	// jQuery
	window.jQuery || document.write('<script src="js/vendor/jquery.min.js"><\/script>');
	
	// angular
	window.angular || document.write('<script src="js/vendor/angular.min.js"><\/script>');
	
	// bootstrap
	(window.$.fn.button || window.$.fn.modal) || document.write('<script src="js/vendor/bootstrap.min.js"><\/script>');
	
	//var locale = JSON.parse(localStorage.getItem('locale'));    
    //var url = 'i18n/angular-locale_'+locale+'.js';
    //if (locale) document.write('<script src="js/vendor/i18n/angular-locale_'+locale+'.js"><\/script>');
}*/

//angular.module('app.controller.root', [])
//.controller('AppCtrl',
//['$rootScope', '$scope', '$http', '$follow', '$filepicker',
//function(rootScope, $scope, $http, follow, filepicker) {
AppCtrl.$inject = ['$rootScope', '$scope', '$http', '$filepicker', '$accessibility', '$message', '$follow'];
function AppCtrl(rootScope, $scope, $http, filepicker, accessibility, message, follow) {
	console.log('AppCtrl ('+$scope.$id+')');
	
	$rootScope = rootScope; // important
	
	// scope fall back for children
	//$scope.$http = $http;
	
	// Factory init - $scope.factory = factory;
 	$rootScope.filepicker = filepicker;
 	$rootScope.accessibility = accessibility;
	$rootScope.message = message;
	$rootScope.follow = follow;
	
	
	// Events
	$scope.$on('$viewContentLoaded', function(event) {
		
		// ga - add $window and $location to $inject if adding in
		// use $rootScope.$on('$routeChangeSuccess', ...) or angular-googleanalytics
		//$window._gaq.push(['_trackPageView', $location.path()]);	
		
	});
	$scope.$on('$includeContentLoaded', function(event) {
		
	});
	
	// referral param
	// requires $routeParams & $cookies
	//if ($routeParams.ref) $cookies.referral = $routeParams.ref;
	
	//!-- App Root Scoope Functions --//
	
}
//}]);

//angular.module('app.controller.dashboard', [])
//.controller('DashboardCtrl', ['$scope', '$http', function($scope, $http) {
DashboardCtrl.$inject = ['$scope', '$http', '$routeParams'];
function DashboardCtrl($scope, $http, $routeParams) {
	console.log('DashboardCtrl (' + $scope.$id + ')');
	
	
	
	//-- App Functions Here --//
	
	
	//-- Directory Search --//
	$scope.search = {query:'',type:($rootScope.settings.account.company) ? 'company' : 'user'};
	
	$scope.loadSearch = function() {
		
		$http.get($scope.settings.server+'/'+$scope.search.type+'/search/'+$scope.search.query)
			.success(function(data){
				console.log(data);
				$scope.results = data;
			})
			.error(function(){
				
			});
	}
	
	
	
	//-- End App Functions Here --//
	$scope.require_signin(function() {
		//$scope.loadSearch();
	});
}
//}]);
